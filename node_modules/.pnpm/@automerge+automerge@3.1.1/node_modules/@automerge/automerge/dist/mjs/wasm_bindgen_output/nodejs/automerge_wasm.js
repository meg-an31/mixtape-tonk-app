
let imports = {};
imports['__wbindgen_placeholder__'] = module.exports;
let wasm;
const { TextEncoder, TextDecoder } = require(`util`);

let WASM_VECTOR_LEN = 0;

let cachedUint8ArrayMemory0 = null;

function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
}

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8ArrayMemory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
        ptr = realloc(ptr, len, offset, 1) >>> 0;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachedDataViewMemory0 = null;

function getDataViewMemory0() {
    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {
        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);
    }
    return cachedDataViewMemory0;
}

function addToExternrefTable0(obj) {
    const idx = wasm.__externref_table_alloc();
    wasm.__wbindgen_export_4.set(idx, obj);
    return idx;
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        const idx = addToExternrefTable0(e);
        wasm.__wbindgen_exn_store(idx);
    }
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches && builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

function takeFromExternrefTable0(idx) {
    const value = wasm.__wbindgen_export_4.get(idx);
    wasm.__externref_table_dealloc(idx);
    return value;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
}
/**
 * @param {any} options
 * @returns {Automerge}
 */
module.exports.create = function(options) {
    const ret = wasm.create(options);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return Automerge.__wrap(ret[0]);
};

/**
 * @param {Uint8Array} data
 * @param {any} options
 * @returns {Automerge}
 */
module.exports.load = function(data, options) {
    const ret = wasm.load(data, options);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return Automerge.__wrap(ret[0]);
};

/**
 * @param {any} change
 * @returns {Uint8Array}
 */
module.exports.encodeChange = function(change) {
    const ret = wasm.encodeChange(change);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
};

/**
 * @param {Uint8Array} change
 * @returns {DecodedChange}
 */
module.exports.decodeChange = function(change) {
    const ret = wasm.decodeChange(change);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
};

/**
 * @returns {SyncState}
 */
module.exports.initSyncState = function() {
    const ret = wasm.initSyncState();
    return SyncState.__wrap(ret);
};

/**
 * @param {any} state
 * @returns {SyncState}
 */
module.exports.importSyncState = function(state) {
    const ret = wasm.importSyncState(state);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return SyncState.__wrap(ret[0]);
};

/**
 * @param {SyncState} state
 * @returns {JsSyncState}
 */
module.exports.exportSyncState = function(state) {
    _assertClass(state, SyncState);
    const ret = wasm.exportSyncState(state.__wbg_ptr);
    return ret;
};

/**
 * @param {any} message
 * @returns {SyncMessage}
 */
module.exports.encodeSyncMessage = function(message) {
    const ret = wasm.encodeSyncMessage(message);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
};

/**
 * @param {Uint8Array} msg
 * @returns {DecodedSyncMessage}
 */
module.exports.decodeSyncMessage = function(msg) {
    const ret = wasm.decodeSyncMessage(msg);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
};

/**
 * @param {SyncState} state
 * @returns {Uint8Array}
 */
module.exports.encodeSyncState = function(state) {
    _assertClass(state, SyncState);
    const ret = wasm.encodeSyncState(state.__wbg_ptr);
    return ret;
};

/**
 * @param {Uint8Array} data
 * @returns {SyncState}
 */
module.exports.decodeSyncState = function(data) {
    const ret = wasm.decodeSyncState(data);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return SyncState.__wrap(ret[0]);
};

const AutomergeFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_automerge_free(ptr >>> 0, 1));

class Automerge {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Automerge.prototype);
        obj.__wbg_ptr = ptr;
        AutomergeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        AutomergeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_automerge_free(ptr, 0);
    }
    /**
     * @param {string | null} [actor]
     * @returns {Automerge}
     */
    static new(actor) {
        var ptr0 = isLikeNone(actor) ? 0 : passStringToWasm0(actor, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.automerge_new(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Automerge.__wrap(ret[0]);
    }
    /**
     * @param {string | null} [actor]
     * @returns {Automerge}
     */
    clone(actor) {
        var ptr0 = isLikeNone(actor) ? 0 : passStringToWasm0(actor, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.automerge_clone(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Automerge.__wrap(ret[0]);
    }
    /**
     * @param {string | null | undefined} actor
     * @param {any} heads
     * @returns {Automerge}
     */
    fork(actor, heads) {
        var ptr0 = isLikeNone(actor) ? 0 : passStringToWasm0(actor, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.automerge_fork(this.__wbg_ptr, ptr0, len0, heads);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Automerge.__wrap(ret[0]);
    }
    /**
     * @returns {number}
     */
    pendingOps() {
        const ret = wasm.automerge_pendingOps(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {string | null} [message]
     * @param {number | null} [time]
     * @returns {Hash | null}
     */
    commit(message, time) {
        var ptr0 = isLikeNone(message) ? 0 : passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.automerge_commit(this.__wbg_ptr, ptr0, len0, !isLikeNone(time), isLikeNone(time) ? 0 : time);
        return ret;
    }
    /**
     * @param {Automerge} other
     * @returns {Heads}
     */
    merge(other) {
        _assertClass(other, Automerge);
        const ret = wasm.automerge_merge(this.__wbg_ptr, other.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {number}
     */
    rollback() {
        const ret = wasm.automerge_rollback(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {Array<any>}
     */
    keys(obj, heads) {
        const ret = wasm.automerge_keys(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {string}
     */
    text(obj, heads) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.automerge_text(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {Array<any>}
     */
    spans(obj, heads) {
        const ret = wasm.automerge_spans(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {number} start
     * @param {number} delete_count
     * @param {any} text
     */
    splice(obj, start, delete_count, text) {
        const ret = wasm.automerge_splice(this.__wbg_ptr, obj, start, delete_count, text);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {string} new_text
     */
    updateText(obj, new_text) {
        const ret = wasm.automerge_updateText(this.__wbg_ptr, obj, new_text);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {Span[]} args
     * @param {UpdateSpansConfig | undefined | null} config
     */
    updateSpans(obj, args, config) {
        const ret = wasm.automerge_updateSpans(this.__wbg_ptr, obj, args, config);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {any} obj
     * @param {any} value
     * @param {any} datatype
     */
    push(obj, value, datatype) {
        const ret = wasm.automerge_push(this.__wbg_ptr, obj, value, datatype);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {ObjType} value
     * @returns {ObjID}
     */
    pushObject(obj, value) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.automerge_pushObject(this.__wbg_ptr, obj, value);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {any} obj
     * @param {number} index
     * @param {any} value
     * @param {any} datatype
     */
    insert(obj, index, value, datatype) {
        const ret = wasm.automerge_insert(this.__wbg_ptr, obj, index, value, datatype);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {number} index
     * @param {{[key: string]: MaterializeValue}} block
     */
    splitBlock(obj, index, block) {
        const ret = wasm.automerge_splitBlock(this.__wbg_ptr, obj, index, block);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {number} index
     */
    joinBlock(obj, index) {
        const ret = wasm.automerge_joinBlock(this.__wbg_ptr, obj, index);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {number} index
     * @param {{[key: string]: MaterializeValue}} block
     */
    updateBlock(obj, index, block) {
        const ret = wasm.automerge_updateBlock(this.__wbg_ptr, obj, index, block);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {any} text
     * @param {number} index
     * @param {Array<any> | null} [heads]
     * @returns {any}
     */
    getBlock(text, index, heads) {
        const ret = wasm.automerge_getBlock(this.__wbg_ptr, text, index, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {ObjID} obj
     * @param {number} index
     * @param {ObjType} value
     * @returns {ObjID}
     */
    insertObject(obj, index, value) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.automerge_insertObject(this.__wbg_ptr, obj, index, value);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {any} obj
     * @param {any} prop
     * @param {any} value
     * @param {any} datatype
     */
    put(obj, prop, value, datatype) {
        const ret = wasm.automerge_put(this.__wbg_ptr, obj, prop, value, datatype);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {Prop} prop
     * @param {ObjType} value
     * @returns {ObjID}
     */
    putObject(obj, prop, value) {
        const ret = wasm.automerge_putObject(this.__wbg_ptr, obj, prop, value);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {ObjID} obj
     * @param {Prop} prop
     * @param {number} value
     */
    increment(obj, prop, value) {
        const ret = wasm.automerge_increment(this.__wbg_ptr, obj, prop, value);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {any} obj
     * @param {any} prop
     * @param {Array<any> | null} [heads]
     * @returns {any}
     */
    get(obj, prop, heads) {
        const ret = wasm.automerge_get(this.__wbg_ptr, obj, prop, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {any} prop
     * @param {Array<any> | null} [heads]
     * @returns {any}
     */
    getWithType(obj, prop, heads) {
        const ret = wasm.automerge_getWithType(this.__wbg_ptr, obj, prop, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {object}
     */
    objInfo(obj, heads) {
        const ret = wasm.automerge_objInfo(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {any} arg
     * @param {Array<any> | null} [heads]
     * @returns {Array<any>}
     */
    getAll(obj, arg, heads) {
        const ret = wasm.automerge_getAll(this.__wbg_ptr, obj, arg, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {boolean} enable
     * @returns {boolean}
     */
    enableFreeze(enable) {
        const ret = wasm.automerge_enableFreeze(this.__wbg_ptr, enable);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @param {string} datatype
     * @param {Function} construct
     * @param {(arg: any) => any | undefined} deconstruct
     */
    registerDatatype(datatype, construct, deconstruct) {
        const ret = wasm.automerge_registerDatatype(this.__wbg_ptr, datatype, construct, deconstruct);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {any} object
     * @param {any} meta
     * @returns {any}
     */
    applyPatches(object, meta) {
        const ret = wasm.automerge_applyPatches(this.__wbg_ptr, object, meta);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} object
     * @param {any} meta
     * @returns {any}
     */
    applyAndReturnPatches(object, meta) {
        const ret = wasm.automerge_applyAndReturnPatches(this.__wbg_ptr, object, meta);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {Patch[]}
     */
    diffIncremental() {
        const ret = wasm.automerge_diffIncremental(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    updateDiffCursor() {
        wasm.automerge_updateDiffCursor(this.__wbg_ptr);
    }
    resetDiffCursor() {
        wasm.automerge_resetDiffCursor(this.__wbg_ptr);
    }
    /**
     * @param {Heads} before
     * @param {Heads} after
     * @returns {Patch[]}
     */
    diff(before, after) {
        const ret = wasm.automerge_diff(this.__wbg_ptr, before, after);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Heads} heads
     */
    isolate(heads) {
        const ret = wasm.automerge_isolate(this.__wbg_ptr, heads);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    integrate() {
        wasm.automerge_integrate(this.__wbg_ptr);
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {number}
     */
    length(obj, heads) {
        const ret = wasm.automerge_length(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @param {ObjID} obj
     * @param {Prop} prop
     */
    delete(obj, prop) {
        const ret = wasm.automerge_delete(this.__wbg_ptr, obj, prop);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @returns {Uint8Array}
     */
    save() {
        const ret = wasm.automerge_save(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Uint8Array}
     */
    saveIncremental() {
        const ret = wasm.automerge_saveIncremental(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Heads} heads
     * @returns {Uint8Array}
     */
    saveSince(heads) {
        const ret = wasm.automerge_saveSince(this.__wbg_ptr, heads);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {Uint8Array}
     */
    saveNoCompress() {
        const ret = wasm.automerge_saveNoCompress(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Uint8Array}
     */
    saveAndVerify() {
        const ret = wasm.automerge_saveAndVerify(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Uint8Array} data
     * @returns {number}
     */
    loadIncremental(data) {
        const ret = wasm.automerge_loadIncremental(this.__wbg_ptr, data);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @param {Change[]} changes
     */
    applyChanges(changes) {
        const ret = wasm.automerge_applyChanges(this.__wbg_ptr, changes);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {Heads} have_deps
     * @returns {Change[]}
     */
    getChanges(have_deps) {
        const ret = wasm.automerge_getChanges(this.__wbg_ptr, have_deps);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Heads} have_deps
     * @returns {ChangeMetadata[]}
     */
    getChangesMeta(have_deps) {
        const ret = wasm.automerge_getChangesMeta(this.__wbg_ptr, have_deps);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Hash} hash
     * @returns {Change | null}
     */
    getChangeByHash(hash) {
        const ret = wasm.automerge_getChangeByHash(this.__wbg_ptr, hash);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Hash} hash
     * @returns {ChangeMetadata | null}
     */
    getChangeMetaByHash(hash) {
        const ret = wasm.automerge_getChangeMetaByHash(this.__wbg_ptr, hash);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Hash} hash
     * @returns {DecodedChange | null}
     */
    getDecodedChangeByHash(hash) {
        const ret = wasm.automerge_getDecodedChangeByHash(this.__wbg_ptr, hash);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {Automerge} other
     * @returns {Change[]}
     */
    getChangesAdded(other) {
        _assertClass(other, Automerge);
        const ret = wasm.automerge_getChangesAdded(this.__wbg_ptr, other.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Heads}
     */
    getHeads() {
        const ret = wasm.automerge_getHeads(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Actor}
     */
    getActorId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.automerge_getActorId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {Change | null}
     */
    getLastLocalChange() {
        const ret = wasm.automerge_getLastLocalChange(this.__wbg_ptr);
        return ret;
    }
    dump() {
        wasm.automerge_dump(this.__wbg_ptr);
    }
    /**
     * @param {Array<any> | null} [heads]
     * @returns {Array<any>}
     */
    getMissingDeps(heads) {
        const ret = wasm.automerge_getMissingDeps(this.__wbg_ptr, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {SyncState} state
     * @param {SyncMessage} message
     */
    receiveSyncMessage(state, message) {
        _assertClass(state, SyncState);
        const ret = wasm.automerge_receiveSyncMessage(this.__wbg_ptr, state.__wbg_ptr, message);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {SyncState} state
     * @returns {SyncMessage | null}
     */
    generateSyncMessage(state) {
        _assertClass(state, SyncState);
        const ret = wasm.automerge_generateSyncMessage(this.__wbg_ptr, state.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any} meta
     * @returns {MaterializeValue}
     */
    toJS(meta) {
        const ret = wasm.automerge_toJS(this.__wbg_ptr, meta);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null | undefined} heads
     * @param {any} meta
     * @returns {any}
     */
    materialize(obj, heads, meta) {
        const ret = wasm.automerge_materialize(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads), meta);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {any} position
     * @param {Array<any> | null | undefined} heads
     * @param {any} move_cursor
     * @returns {string}
     */
    getCursor(obj, position, heads, move_cursor) {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.automerge_getCursor(this.__wbg_ptr, obj, position, isLikeNone(heads) ? 0 : addToExternrefTable0(heads), move_cursor);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {any} obj
     * @param {any} cursor
     * @param {Array<any> | null} [heads]
     * @returns {number}
     */
    getCursorPosition(obj, cursor, heads) {
        const ret = wasm.automerge_getCursorPosition(this.__wbg_ptr, obj, cursor, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @param {string | null} [message]
     * @param {number | null} [time]
     * @returns {Hash}
     */
    emptyChange(message, time) {
        var ptr0 = isLikeNone(message) ? 0 : passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.automerge_emptyChange(this.__wbg_ptr, ptr0, len0, !isLikeNone(time), isLikeNone(time) ? 0 : time);
        return ret;
    }
    /**
     * @param {any} obj
     * @param {any} range
     * @param {any} name
     * @param {any} value
     * @param {any} datatype
     */
    mark(obj, range, name, value, datatype) {
        const ret = wasm.automerge_mark(this.__wbg_ptr, obj, range, name, value, datatype);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {ObjID} obj
     * @param {MarkRange} range
     * @param {string} name
     */
    unmark(obj, range, name) {
        const ret = wasm.automerge_unmark(this.__wbg_ptr, obj, range, name);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {any} obj
     * @param {Array<any> | null} [heads]
     * @returns {any}
     */
    marks(obj, heads) {
        const ret = wasm.automerge_marks(this.__wbg_ptr, obj, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {any} obj
     * @param {number} index
     * @param {Array<any> | null} [heads]
     * @returns {object}
     */
    marksAt(obj, index, heads) {
        const ret = wasm.automerge_marksAt(this.__wbg_ptr, obj, index, isLikeNone(heads) ? 0 : addToExternrefTable0(heads));
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {SyncState} state
     * @returns {boolean}
     */
    hasOurChanges(state) {
        _assertClass(state, SyncState);
        const ret = wasm.automerge_hasOurChanges(this.__wbg_ptr, state.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @returns {Hash[]}
     */
    topoHistoryTraversal() {
        const ret = wasm.automerge_topoHistoryTraversal(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Stats}
     */
    stats() {
        const ret = wasm.automerge_stats(this.__wbg_ptr);
        return ret;
    }
}
module.exports.Automerge = Automerge;

const SyncStateFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_syncstate_free(ptr >>> 0, 1));

class SyncState {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SyncState.prototype);
        obj.__wbg_ptr = ptr;
        SyncStateFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SyncStateFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_syncstate_free(ptr, 0);
    }
    /**
     * @returns {Heads}
     */
    get sharedHeads() {
        const ret = wasm.syncstate_sharedHeads(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Heads}
     */
    get lastSentHeads() {
        const ret = wasm.syncstate_lastSentHeads(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Heads} heads
     */
    set lastSentHeads(heads) {
        const ret = wasm.syncstate_set_lastSentHeads(this.__wbg_ptr, heads);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @param {Heads} hashes
     */
    set sentHashes(hashes) {
        const ret = wasm.syncstate_set_sentHashes(this.__wbg_ptr, hashes);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @returns {SyncState}
     */
    clone() {
        const ret = wasm.syncstate_clone(this.__wbg_ptr);
        return SyncState.__wrap(ret);
    }
}
module.exports.SyncState = SyncState;

module.exports.__wbg_String_8f0eb39a4a4c2f66 = function(arg0, arg1) {
    const ret = String(arg1);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_apply_eb9e9b97497f91e4 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = Reflect.apply(arg0, arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_assign_3627b8559449930a = function(arg0, arg1) {
    const ret = Object.assign(arg0, arg1);
    return ret;
};

module.exports.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
    const ret = arg0.buffer;
    return ret;
};

module.exports.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {
    const ret = arg0.call(arg1);
    return ret;
}, arguments) };

module.exports.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = arg0.call(arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_concat_9de968491c4340cf = function(arg0, arg1) {
    const ret = arg0.concat(arg1);
    return ret;
};

module.exports.__wbg_defineProperty_a3ddad9901e2d29e = function(arg0, arg1, arg2) {
    const ret = Object.defineProperty(arg0, arg1, arg2);
    return ret;
};

module.exports.__wbg_deleteProperty_96363d4a1d977c97 = function() { return handleError(function (arg0, arg1) {
    const ret = Reflect.deleteProperty(arg0, arg1);
    return ret;
}, arguments) };

module.exports.__wbg_done_769e5ede4b31c67b = function(arg0) {
    const ret = arg0.done;
    return ret;
};

module.exports.__wbg_entries_3265d4158b33e5dc = function(arg0) {
    const ret = Object.entries(arg0);
    return ret;
};

module.exports.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg0;
        deferred0_1 = arg1;
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
    }
};

module.exports.__wbg_for_4ff07bddd743c5e7 = function(arg0, arg1) {
    const ret = Symbol.for(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_freeze_ef6d70cf38e8d948 = function(arg0) {
    const ret = Object.freeze(arg0);
    return ret;
};

module.exports.__wbg_from_2a5d3e218e67aa85 = function(arg0) {
    const ret = Array.from(arg0);
    return ret;
};

module.exports.__wbg_getRandomValues_3c9c0d586e575a16 = function() { return handleError(function (arg0, arg1) {
    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));
}, arguments) };

module.exports.__wbg_getTime_46267b1c24877e30 = function(arg0) {
    const ret = arg0.getTime();
    return ret;
};

module.exports.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {
    const ret = Reflect.get(arg0, arg1);
    return ret;
}, arguments) };

module.exports.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {
    const ret = arg0[arg1 >>> 0];
    return ret;
};

module.exports.__wbg_instanceof_ArrayBuffer_e14585432e3737fc = function(arg0) {
    let result;
    try {
        result = arg0 instanceof ArrayBuffer;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Date_e9a9be8b9cea7890 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Date;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Object_7f2dcef8f78644a4 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Object;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_instanceof_Uint8Array_17156bcf118086a9 = function(arg0) {
    let result;
    try {
        result = arg0 instanceof Uint8Array;
    } catch (_) {
        result = false;
    }
    const ret = result;
    return ret;
};

module.exports.__wbg_isArray_a1eab7e0d067391b = function(arg0) {
    const ret = Array.isArray(arg0);
    return ret;
};

module.exports.__wbg_iterator_9a24c88df860dc65 = function() {
    const ret = Symbol.iterator;
    return ret;
};

module.exports.__wbg_keys_5c77a08ddc2fb8a6 = function(arg0) {
    const ret = Object.keys(arg0);
    return ret;
};

module.exports.__wbg_length_a446193dc22c12f8 = function(arg0) {
    const ret = arg0.length;
    return ret;
};

module.exports.__wbg_length_d56737991078581b = function(arg0) {
    const ret = arg0.length;
    return ret;
};

module.exports.__wbg_length_e2d2a49132c1b256 = function(arg0) {
    const ret = arg0.length;
    return ret;
};

module.exports.__wbg_log_1ae1e9f741096e91 = function(arg0, arg1) {
    console.log(arg0, arg1);
};

module.exports.__wbg_log_c222819a41e063d3 = function(arg0) {
    console.log(arg0);
};

module.exports.__wbg_new_1ab78df5e132f715 = function(arg0, arg1) {
    const ret = new RangeError(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_new_31a97dac4f10fab7 = function(arg0) {
    const ret = new Date(arg0);
    return ret;
};

module.exports.__wbg_new_405e22f390576ce2 = function() {
    const ret = new Object();
    return ret;
};

module.exports.__wbg_new_78feb108b6472713 = function() {
    const ret = new Array();
    return ret;
};

module.exports.__wbg_new_8a6f238a6ece86ea = function() {
    const ret = new Error();
    return ret;
};

module.exports.__wbg_new_a12002a7f91c75be = function(arg0) {
    const ret = new Uint8Array(arg0);
    return ret;
};

module.exports.__wbg_new_c68d7209be747379 = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {
    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);
    return ret;
};

module.exports.__wbg_next_25feadfc0913fea9 = function(arg0) {
    const ret = arg0.next;
    return ret;
};

module.exports.__wbg_next_6574e1a8a62d1055 = function() { return handleError(function (arg0) {
    const ret = arg0.next();
    return ret;
}, arguments) };

module.exports.__wbg_ownKeys_3930041068756f1f = function() { return handleError(function (arg0) {
    const ret = Reflect.ownKeys(arg0);
    return ret;
}, arguments) };

module.exports.__wbg_push_737cfc8c1432c2c6 = function(arg0, arg1) {
    const ret = arg0.push(arg1);
    return ret;
};

module.exports.__wbg_set_37837023f3d740e8 = function(arg0, arg1, arg2) {
    arg0[arg1 >>> 0] = arg2;
};

module.exports.__wbg_set_3f1d0b984ed272ed = function(arg0, arg1, arg2) {
    arg0[arg1] = arg2;
};

module.exports.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {
    arg0.set(arg1, arg2 >>> 0);
};

module.exports.__wbg_set_bb8cecf6a62b9f46 = function() { return handleError(function (arg0, arg1, arg2) {
    const ret = Reflect.set(arg0, arg1, arg2);
    return ret;
}, arguments) };

module.exports.__wbg_slice_972c243648c9fd2e = function(arg0, arg1, arg2) {
    const ret = arg0.slice(arg1 >>> 0, arg2 >>> 0);
    return ret;
};

module.exports.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {
    const ret = arg1.stack;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbg_toString_66ab719c2a98bdf1 = function(arg0) {
    const ret = arg0.toString();
    return ret;
};

module.exports.__wbg_unshift_c290010f73f04fb1 = function(arg0, arg1) {
    const ret = arg0.unshift(arg1);
    return ret;
};

module.exports.__wbg_value_cd1ffa7b1ab794f1 = function(arg0) {
    const ret = arg0.value;
    return ret;
};

module.exports.__wbg_values_fcb8ba8c0aad8b58 = function(arg0) {
    const ret = Object.values(arg0);
    return ret;
};

module.exports.__wbindgen_bigint_from_i64 = function(arg0) {
    const ret = arg0;
    return ret;
};

module.exports.__wbindgen_bigint_from_u64 = function(arg0) {
    const ret = BigInt.asUintN(64, arg0);
    return ret;
};

module.exports.__wbindgen_boolean_get = function(arg0) {
    const v = arg0;
    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;
    return ret;
};

module.exports.__wbindgen_debug_string = function(arg0, arg1) {
    const ret = debugString(arg1);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_error_new = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return ret;
};

module.exports.__wbindgen_init_externref_table = function() {
    const table = wasm.__wbindgen_export_4;
    const offset = table.grow(4);
    table.set(0, undefined);
    table.set(offset + 0, undefined);
    table.set(offset + 1, null);
    table.set(offset + 2, true);
    table.set(offset + 3, false);
    ;
};

module.exports.__wbindgen_is_array = function(arg0) {
    const ret = Array.isArray(arg0);
    return ret;
};

module.exports.__wbindgen_is_function = function(arg0) {
    const ret = typeof(arg0) === 'function';
    return ret;
};

module.exports.__wbindgen_is_null = function(arg0) {
    const ret = arg0 === null;
    return ret;
};

module.exports.__wbindgen_is_object = function(arg0) {
    const val = arg0;
    const ret = typeof(val) === 'object' && val !== null;
    return ret;
};

module.exports.__wbindgen_is_string = function(arg0) {
    const ret = typeof(arg0) === 'string';
    return ret;
};

module.exports.__wbindgen_is_undefined = function(arg0) {
    const ret = arg0 === undefined;
    return ret;
};

module.exports.__wbindgen_json_serialize = function(arg0, arg1) {
    const obj = arg1;
    const ret = JSON.stringify(obj === undefined ? null : obj);
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_jsval_loose_eq = function(arg0, arg1) {
    const ret = arg0 == arg1;
    return ret;
};

module.exports.__wbindgen_memory = function() {
    const ret = wasm.memory;
    return ret;
};

module.exports.__wbindgen_number_get = function(arg0, arg1) {
    const obj = arg1;
    const ret = typeof(obj) === 'number' ? obj : undefined;
    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);
};

module.exports.__wbindgen_number_new = function(arg0) {
    const ret = arg0;
    return ret;
};

module.exports.__wbindgen_string_get = function(arg0, arg1) {
    const obj = arg1;
    const ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};

module.exports.__wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return ret;
};

module.exports.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

const path = require('path').join(__dirname, 'automerge_wasm_bg.wasm');
const bytes = require('fs').readFileSync(path);

const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
wasm = wasmInstance.exports;
module.exports.__wasm = wasm;

wasm.__wbindgen_start();

