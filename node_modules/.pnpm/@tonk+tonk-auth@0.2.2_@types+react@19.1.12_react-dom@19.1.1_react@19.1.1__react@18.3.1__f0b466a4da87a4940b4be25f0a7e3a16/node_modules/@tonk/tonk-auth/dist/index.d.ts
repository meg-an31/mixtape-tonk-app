import { UserResource, SessionResource } from '@clerk/types';

/**
 * Utility functions for working with Result types
 */
/**
 * Represents a successful result
 */
type Ok<T> = {
    ok: true;
    value: T;
};
/**
 * Represents an error result
 */
type Err<E> = {
    ok: false;
    error: E;
};
/**
 * A Result type that can be either Ok or Err
 */
type Result<T, E> = Ok<T> | Err<E>;

/**
 * Configuration options for TonkAuth client
 *
 * @example
 * ```typescript
 * const options: TonkAuthOptions = {
 *   // Called when subscription expires or becomes inactive
 *   onSubscriptionDisabled: () => {
 *     console.log('⚠️ Your subscription has expired!');
 *     process.exit(1);
 *   },
 *
 *   // Check subscription every 30 seconds instead of default 1 minute
 *   checkInterval: 30 * 1000,
 *
 *   // Retry failed requests up to 5 times instead of default 3
 *   retryAttempts: 5,
 *
 *   // Wait 2 seconds between retries instead of default 1 second
 *   retryDelay: 2000
 * };
 *
 * const auth = await TonkAuth(options);
 * ```
 */
type TonkAuthOptions = {
    /**
     * Callback function executed when user's subscription becomes inactive
     *
     * This is called during periodic checks if the subscription status
     * changes from active to inactive. Useful for displaying warnings
     * or gracefully shutting down CLI tools.
     *
     * @type {() => void}
     * @optional
     * @default undefined
     */
    onSubscriptionDisabled?: () => void;
    /**
     * Interval for periodic subscription status checks (in milliseconds)
     *
     * The client will automatically check subscription status at this interval
     * to ensure the user hasn't downgraded or cancelled their subscription.
     *
     * @type {number}
     * @optional
     * @default 60000 (1 minute)
     */
    checkInterval?: number;
    /**
     * Maximum number of retry attempts for failed API requests
     *
     * When subscription checks or authentication requests fail due to network
     * issues, the client will retry up to this many times before giving up.
     *
     * @type {number}
     * @optional
     * @default 3
     */
    retryAttempts?: number;
    /**
     * Base delay between retry attempts (in milliseconds)
     *
     * Each retry will wait: `retryDelay * attemptNumber` milliseconds.
     * For example, with retryDelay=1000: 1st retry waits 1s, 2nd waits 2s, etc.
     *
     * @type {number}
     * @optional
     * @default 1000 (1 second)
     */
    retryDelay?: number;
};
/**
 * `tonk-auth` Client Interface
 *
 * Provides authentication and subscription management for the Tonk CLI.
 * This is the main interface returned by the TonkAuth factory function.
 *
 * @interface TonkAuthClient
 * @example
 * ```typescript
 * import { TonkAuth } from 'tonk-auth';
 *
 * const auth = await TonkAuth({
 *   onSubscriptionDisabled: () => console.log('Subscription expired!'),
 *   checkInterval: 60000 // Check every minute
 * });
 *
 * // Check authentication status
 * if (!auth.isSignedIn) {
 *   const result = await auth.login();
 *   if (result.ok) {
 *     console.log(`Welcome ${auth.friendlyName}!`);
 *     console.log(`Subscription active: ${auth.activeSubscription}`);
 *   }
 * }
 *
 * // Clean up when done
 * auth.destroy();
 * ```
 */
interface TonkAuthClient {
    /**
     * Whether the user is currently signed in to Clerk
     * @readonly
     * @type {boolean}
     */
    readonly isSignedIn: boolean;
    /**
     * Whether the user has an active subscription
     * This is checked periodically and cached for performance
     * @readonly
     * @type {boolean}
     */
    readonly activeSubscription: boolean;
    /**
     * User's primary email address
     * Returns "unknown" if not available
     * @readonly
     * @type {string}
     */
    readonly email: string;
    /**
     * User's display name for friendly greeting
     * Fallback order: firstName → lastName → username → email
     * Returns null when user is not authenticated
     * @readonly
     * @type {string | null}
     */
    readonly friendlyName: string | null;
    /**
     * Current library version from package.json
     * @readonly
     * @type {string}
     */
    readonly version: string;
    /**
     * Direct access to Clerk user resource
     * ⚠️ Advanced usage only - for debugging or direct Clerk API access
     * @readonly
     * @type {UserResource | null}
     */
    readonly __user: UserResource | null;
    /**
     * Direct access to Clerk session resource
     * ⚠️ Advanced usage only - for debugging or direct Clerk API access
     * @readonly
     * @type {SessionResource | null}
     */
    readonly __session: SessionResource | null;
    /**
     * Authenticate user via browser and check subscription status
     *
     * Opens a browser window for OAuth authentication, then automatically
     * checks the user's subscription status and caches the result.
     *
     * @returns {Promise<Result<{data: UserResource | null | undefined, subscription: boolean}, Error>>}
     *   Result containing user data and subscription status, or error details
     *
     * @example
     * ```typescript
     * const result = await auth.login();
     * if (result.ok) {
     *   console.log(`Logged in as: ${result.value.data?.firstName}`);
     *   console.log(`Has subscription: ${result.value.subscription}`);
     * } else {
     *   console.error('Login failed:', result.error.message);
     * }
     * ```
     */
    login(): Promise<Result<{
        data: UserResource | null | undefined;
        subscription: boolean;
    }, Error>>;
    /**
     * Sign out user and clear all stored authentication data
     *
     * Clears Clerk session, local token cache, and resets subscription status.
     * This is a complete cleanup that ensures no authentication data remains.
     *
     * @returns {Promise<Result<string, Error>>} Success message or error details
     *
     * @example
     * ```typescript
     * const result = await auth.logout();
     * if (result.ok) {
     *   console.log(result.value); // "Logged out successfully"
     * } else {
     *   console.error('Logout failed:', result.error.message);
     * }
     * ```
     */
    logout(): Promise<Result<string, Error>>;
    /**
     * Clean up resources and stop periodic subscription checks
     *
     * Call this when you're done with the TonkAuth instance to prevent
     * memory leaks from the periodic subscription check interval.
     * This does NOT log out the user.
     *
     * @returns {void}
     *
     * @example
     * ```typescript
     * // Clean up when your app shuts down
     * process.on('SIGINT', () => {
     *   auth.destroy();
     *   process.exit(0);
     * });
     * ```
     */
    destroy(): void;
}
/**
 * Create a new TonkAuth client instance
 *
 * Factory function that creates and initializes a TonkAuth client for handling
 * CLI authentication and subscription management. The client automatically
 * handles token caching, periodic subscription checks, and provides a clean
 * API for login/logout operations.
 *
 * @async
 * @function TonkAuth
 * @param {TonkAuthOptions} [options={}] - Configuration options for the client
 * @returns {Promise<TonkAuthClient>} Promise that resolves to an initialized TonkAuth client
 * @throws {Error} Throws if client initialization fails
 *
 * @example
 * ```typescript
 * import { TonkAuth } from 'tonk-auth';
 *
 * // Basic usage with default options
 * const auth = await TonkAuth();
 *
 * // Advanced configuration
 * const auth = await TonkAuth({
 *   // Handle subscription expiration gracefully
 *   onSubscriptionDisabled: () => {
 *     console.log('⚠️ Subscription expired! Please upgrade to continue.');
 *     process.exit(1);
 *   },
 *
 *   // Check subscription status every 30 seconds
 *   checkInterval: 30 * 1000,
 *
 *   // Be more aggressive with retries
 *   retryAttempts: 5,
 *   retryDelay: 500
 * });
 *
 * // Use the client
 * if (!auth.isSignedIn) {
 *   const result = await auth.login();
 *   if (result.ok) {
 *     console.log(`Welcome back, ${auth.friendlyName}!`);
 *   }
 * }
 *
 * // Clean up when done (important for CLI apps)
 * process.on('SIGINT', () => {
 *   auth.destroy();
 *   process.exit(0);
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Error handling
 * try {
 *   const auth = await TonkAuth();
 *
 *   // Check if user has valid subscription
 *   if (!auth.activeSubscription) {
 *     console.log('No active subscription found');
 *     const loginResult = await auth.login();
 *
 *     if (loginResult.ok && !loginResult.value.subscription) {
 *       console.log('Please upgrade your subscription to use this feature');
 *       return;
 *     }
 *   }
 *
 *   console.log(`✅ Ready to go, ${auth.friendlyName}!`);
 * } catch (error) {
 *   console.error('Failed to initialize TonkAuth:', error);
 *   process.exit(1);
 * }
 * ```
 *
 * @since 1.0.0
 */
declare function TonkAuth(options?: TonkAuthOptions): Promise<TonkAuthClient>;

export { TonkAuth, type TonkAuthClient, type TonkAuthOptions };
