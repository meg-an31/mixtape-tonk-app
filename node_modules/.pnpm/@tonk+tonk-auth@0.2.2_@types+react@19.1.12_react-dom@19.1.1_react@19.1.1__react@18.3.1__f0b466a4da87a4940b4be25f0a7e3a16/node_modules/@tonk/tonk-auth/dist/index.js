import{createPublicKey as O}from"crypto";import{jwtVerify as U}from"jose";import N from"open";var l=r=>({ok:!0,value:r}),o=r=>({ok:!1,error:r});function k(r){return new Promise(e=>setTimeout(e,r))}var f="0.2.2";import P from"@clerk/clerk-js/headless/index.js";import c from"keytar";async function d(r){let e=await c.getPassword(r,"__clerk_client_jwt");return{getToken:()=>e??void 0,saveToken:async t=>{e=t,await c.setPassword(r,"__clerk_client_jwt",t)}}}async function b(r){let e=await c.getPassword(r,"__subscription_token");return{getToken:()=>e??void 0,saveToken:async t=>{e=t,await c.setPassword(r,"__subscription_token",t)},clearToken:async()=>{e=null;try{await c.deletePassword(r,"__subscription_token")}catch(t){}}}}var S=async(r="tonk-cli")=>{let e=`${_}-${r}`;try{await c.deletePassword(e,"__clerk_client_jwt"),await c.deletePassword(e,"__subscription_token")}catch(t){}try{await c.deletePassword(e,"__subscription_token")}catch(t){}T()};var{Clerk:C}=P,_="tonk-cli",A="pk_live_Y2xlcmsudG9uay54eXok",i=null,g=async(r="tonk-cli")=>{let e=`${_}-${r}`,t=await d(e);return i||(i=new C(A),i.__unstable__onBeforeRequest(s=>{s.credentials="omit",s.url?.searchParams.append("_is_native","1"),s.headers.set("authorization",t.getToken()||"")}),i.__unstable__onAfterResponse((s,n)=>{let a=n?.headers.get("authorization");a&&t.saveToken(a)}),await i.load({standardBrowser:!1}),i)};await g();var T=async()=>{i=await g()};import{createServer as x}from"http";var m=1337,E=`http://127.0.0.1:${m}`,L=`
<body>
  <main style="height:100%;width:100%;display:flex;justify-content:center;align-items:center;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;">
    <div>
      <h2>Signed in</h2>
      <h3 style="font-weight: 400;">You can safely close this tab and return to your terminal</h3>
    </div>
  </main>
</body>
`,w=async()=>{let r=null;return{LOCALHOST_REDIRECT_URL:E,listenForAuthRedirect:()=>new Promise((s,n)=>{let a=x((p,v)=>{let R=new URL(p.url||"",E).searchParams.get("token")??"";v.writeHead(200,{"Content-Type":"text/html"}),v.end(L),queueMicrotask(()=>{s(R),a.close(()=>{r=null})})});r=a,a.on("error",p=>{p.code==="EADDRINUSE"?n(new Error(`Port ${m} is already in use`)):n(p)}),a.listen(m);let u=()=>{r&&r.close(()=>{r=null})};process.once("SIGINT",u),process.once("SIGTERM",u)}),cleanup:()=>{r&&r.close(()=>{r=null})}}};var h="https://dashboard.tonk.xyz",D=`${h}/dashboard/auth-cli`,B=`${h}`,K=`${h}/api/v1/cli-subscription`,$=O(Buffer.from("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4RXhKRGlRbFBPTFl4VlBZZ0ZQMgpRNDV4Z2ZqWVY3MW1tQTV5cWgxYTlFWFc3Wm1QVnFRRC9MZE1JaUplc0VYVDNhWkowc0FJbDVMVml6OGEwQmM2CnkzLy93dDdFQVkySFZ0S2tXWldZaTV6eklUb3hFMHlJYnZxbWtnZmtzbElHZElDaVZ4bDE2VHdIL0prZXd1Z1EKNFJIR1ZIVUFrRXZ4dFRsb0t4M3FtQmtiNnVFRktDbzFmSWZTYmdUcWt2c085aGl0bFAwYktDQUFJR3F0c0JxTApoRmZ0OHhtMWs5bGJyNGU2bStaNVM4SjJSNU9QLzVnbmRDMWc4UmZaQTdlWmMweFh5RzJhcHJmNVluaWtCd3JaCmZLWnlUSXQ1cTA1RG05NnNJcS9VMmF3QkZEWFdKZjR2ZDJ1R2hzZ05PYVdkUGxzSSt4OSs0QkY0QkhRLytWZ0sKc1FJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==","base64").toString("utf-8")),y=class{_activeSubscription=!1;_options;_checkIntervalId=null;_subscriptionData=null;__initialized=!1;constructor(e={}){this._options={onSubscriptionDisabled:e.onSubscriptionDisabled||(()=>{}),checkInterval:e.checkInterval||60*1e3,retryAttempts:e.retryAttempts||3,retryDelay:e.retryDelay||1e3},this._initialize()}async _initialize(){try{i.session&&await this._updateSubscriptionStatus(),this._setupPeriodicCheck(),this.__initialized=!0}catch(e){throw console.error("[TonkAuth] initialization failed:",e),new Error("TonkAuth initialization failed")}}_setupPeriodicCheck(){this._checkIntervalId&&clearInterval(this._checkIntervalId),this._checkIntervalId=setInterval(async()=>{i.session&&await this._updateSubscriptionStatus()},this._options.checkInterval)}async _updateSubscriptionStatus(){let e=await b("tonk-cli"),t=e.getToken();if(t){let s=JSON.parse(t);if(s.active&&!(s.data?.exp&&s.data.exp<Date.now()/1e3)){this._activeSubscription=s.active,this._subscriptionData=s.data;return}}await e.clearToken();try{let s=await this._fetchSubscriptionTokenWithRetry();if(s.ok){let n=this._activeSubscription;this._activeSubscription=s.value.active,this._subscriptionData=s.value.data,await e.clearToken(),s.value.data&&await e.saveToken(JSON.stringify(s.value)),n&&!this._activeSubscription&&this._options.onSubscriptionDisabled()}else console.warn("Failed to update subscription status:",s.error.message,`URL[${h}]`)}catch(s){console.warn("Error updating subscription status:",s)}}async _fetchSubscriptionTokenWithRetry(){for(let e=1;e<=this._options.retryAttempts;e++)try{let t=await this._fetchSubscriptionToken();if(t.ok||t.error.message.includes("No active Clerk session")||t.error.message.includes("Failed to obtain session token"))return t;if(t.error.message.includes("Subscription inactive"))return{ok:!0,value:{active:!1,data:null}};if(e<this._options.retryAttempts){await k(this._options.retryDelay*e);continue}return t}catch(t){if(e===this._options.retryAttempts)return o(t);await k(this._options.retryDelay*e)}return o(new Error("Max retry attempts exceeded"))}async _fetchSubscriptionToken(){try{let e=i;if(!e.session)return o(new Error("No active Clerk session"));let t=await e.session.getToken();if(!t)return o(new Error("Failed to obtain session token"));let s=await fetch(K,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}});if(!s.ok)return o(new Error(`Token endpoint error ${s.status}`));let n=await s.json();if(n.status===402)return l({active:!1,data:null});if(!n.token)return o(new Error("No token in response"));let a=n.token,u=await this._verifyCliToken(a);return u.ok?(await(await d("tonk-cli")).saveToken(a),l(u.value)):o(u.error)}catch(e){return o(e)}}async _verifyCliToken(e){try{let{payload:t}=await U(e,$,{audience:"tonk-cli",issuer:[B]});return t.subscription_active?l({active:!0,data:t}):l({active:!1,data:null})}catch(t){return o(t)}}get activeSubscription(){return this._activeSubscription}get isSignedIn(){return i.isSignedIn}get email(){return this.__user?.primaryEmailAddress?.emailAddress??"unknown"}get friendlyName(){return this.__user?this.__user?.firstName??this.__user?.lastName??this.__user?.username??this.email:null}get version(){return f}get __user(){return i.user??null}get __session(){return i.session??null}async login(){let e=null;try{e=await w();let t=encodeURI(`${D}?redirectUrl=${e.LOCALHOST_REDIRECT_URL}`);await N(t);let s=await e.listenForAuthRedirect(),n=await i.client?.signIn.create({strategy:"ticket",ticket:s});return n?n.status!=="complete"?o(new Error(`Flow did not complete: ${JSON.stringify(n)}`)):(n.createdSessionId&&await i.setActive({session:n.createdSessionId}),await i.session?.reload(),await i.client?.reload(),await this._updateSubscriptionStatus(),l({data:i.user,subscription:this._activeSubscription})):o(new Error("Sign-in request did not return a response"))}catch(t){return o(t)}finally{e&&e.cleanup()}}async logout(){try{return i.client?.clearCache(),i.session&&await i.signOut(),await S(),this._activeSubscription=!1,this._subscriptionData=null,l("Logged out successfully")}catch(e){return o(e)}}destroy(){this._checkIntervalId&&(clearInterval(this._checkIntervalId),this._checkIntervalId=null)}};async function j(r={}){let e=new y(r);for(;!e.__initialized;)await new Promise(t=>setTimeout(t,1));return e}export{j as TonkAuth};
//# sourceMappingURL=index.js.map