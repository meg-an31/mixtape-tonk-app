var Ge = (e) => {
  throw TypeError(e);
};
var Xe = (e, t, n) => t.has(e) || Ge("Cannot " + n);
var k = (e, t, n) => (Xe(e, t, "read from private field"), n ? n.call(e) : t.get(e)), M = (e, t, n) => t.has(e) ? Ge("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, n), Q = (e, t, n, r) => (Xe(e, t, "write to private field"), r ? r.call(e, n) : t.set(e, n), n);
import { Repo as nn } from "@automerge/automerge-repo";
import ee from "chalk";
class V {
  constructor() {
    this.logLevel = "debug";
  }
  static getInstance() {
    return V.instance || (V.instance = new V()), V.instance;
  }
  setLogLevel(t) {
    this.logLevel = t;
  }
  getTimestamp() {
    return (/* @__PURE__ */ new Date()).toISOString();
  }
  shouldLog(t) {
    const n = ["debug", "info", "warn", "error"];
    return n.indexOf(t) >= n.indexOf(this.logLevel);
  }
  debug(t, ...n) {
    this.shouldLog("debug") && console.log(
      ee.gray(`[${this.getTimestamp()}] DEBUG:`),
      t,
      ...n
    );
  }
  info(t, ...n) {
    this.shouldLog("info") && console.log(
      ee.blue(`[${this.getTimestamp()}] INFO:`),
      t,
      ...n
    );
  }
  warn(t, ...n) {
    this.shouldLog("warn") && console.log(
      ee.yellow(`[${this.getTimestamp()}] WARN:`),
      t,
      ...n
    );
  }
  error(t, ...n) {
    if (this.shouldLog("error")) {
      const r = t instanceof Error ? t.stack || t.message : t;
      console.error(
        ee.red(`[${this.getTimestamp()}] ERROR:`),
        r,
        ...n
      );
    }
  }
  // Add a method to format objects for better logging
  formatObject(t) {
    return t instanceof Uint8Array ? `Uint8Array(${t.length})` : t;
  }
  debugWithContext(t, n, ...r) {
    if (this.shouldLog("debug")) {
      const s = r.map((o) => this.formatObject(o));
      console.log(
        ee.gray(`[${this.getTimestamp()}] DEBUG [${t}]:`),
        n,
        ...s
      );
    }
  }
}
const A = V.getInstance();
function pt(e, t) {
  return function() {
    return e.apply(t, arguments);
  };
}
const { toString: rn } = Object.prototype, { getPrototypeOf: Ve } = Object, { iterator: Re, toStringTag: mt } = Symbol, Se = /* @__PURE__ */ ((e) => (t) => {
  const n = rn.call(t);
  return e[n] || (e[n] = n.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), x = (e) => (e = e.toLowerCase(), (t) => Se(t) === e), Oe = (e) => (t) => typeof t === e, { isArray: Y } = Array, re = Oe("undefined");
function sn(e) {
  return e !== null && !re(e) && e.constructor !== null && !re(e.constructor) && I(e.constructor.isBuffer) && e.constructor.isBuffer(e);
}
const yt = x("ArrayBuffer");
function on(e) {
  let t;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? t = ArrayBuffer.isView(e) : t = e && e.buffer && yt(e.buffer), t;
}
const an = Oe("string"), I = Oe("function"), wt = Oe("number"), Te = (e) => e !== null && typeof e == "object", cn = (e) => e === !0 || e === !1, fe = (e) => {
  if (Se(e) !== "object")
    return !1;
  const t = Ve(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(mt in e) && !(Re in e);
}, ln = x("Date"), un = x("File"), fn = x("Blob"), dn = x("FileList"), hn = (e) => Te(e) && I(e.pipe), pn = (e) => {
  let t;
  return e && (typeof FormData == "function" && e instanceof FormData || I(e.append) && ((t = Se(e)) === "formdata" || // detect form-data instance
  t === "object" && I(e.toString) && e.toString() === "[object FormData]"));
}, mn = x("URLSearchParams"), [yn, wn, gn, En] = ["ReadableStream", "Request", "Response", "Headers"].map(x), bn = (e) => e.trim ? e.trim() : e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function ae(e, t, { allOwnKeys: n = !1 } = {}) {
  if (e === null || typeof e > "u")
    return;
  let r, s;
  if (typeof e != "object" && (e = [e]), Y(e))
    for (r = 0, s = e.length; r < s; r++)
      t.call(null, e[r], r, e);
  else {
    const o = n ? Object.getOwnPropertyNames(e) : Object.keys(e), i = o.length;
    let a;
    for (r = 0; r < i; r++)
      a = o[r], t.call(null, e[a], a, e);
  }
}
function gt(e, t) {
  t = t.toLowerCase();
  const n = Object.keys(e);
  let r = n.length, s;
  for (; r-- > 0; )
    if (s = n[r], t === s.toLowerCase())
      return s;
  return null;
}
const B = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, Et = (e) => !re(e) && e !== B;
function Ue() {
  const { caseless: e } = Et(this) && this || {}, t = {}, n = (r, s) => {
    const o = e && gt(t, s) || s;
    fe(t[o]) && fe(r) ? t[o] = Ue(t[o], r) : fe(r) ? t[o] = Ue({}, r) : Y(r) ? t[o] = r.slice() : t[o] = r;
  };
  for (let r = 0, s = arguments.length; r < s; r++)
    arguments[r] && ae(arguments[r], n);
  return t;
}
const Rn = (e, t, n, { allOwnKeys: r } = {}) => (ae(t, (s, o) => {
  n && I(s) ? e[o] = pt(s, n) : e[o] = s;
}, { allOwnKeys: r }), e), Sn = (e) => (e.charCodeAt(0) === 65279 && (e = e.slice(1)), e), On = (e, t, n, r) => {
  e.prototype = Object.create(t.prototype, r), e.prototype.constructor = e, Object.defineProperty(e, "super", {
    value: t.prototype
  }), n && Object.assign(e.prototype, n);
}, Tn = (e, t, n, r) => {
  let s, o, i;
  const a = {};
  if (t = t || {}, e == null) return t;
  do {
    for (s = Object.getOwnPropertyNames(e), o = s.length; o-- > 0; )
      i = s[o], (!r || r(i, e, t)) && !a[i] && (t[i] = e[i], a[i] = !0);
    e = n !== !1 && Ve(e);
  } while (e && (!n || n(e, t)) && e !== Object.prototype);
  return t;
}, An = (e, t, n) => {
  e = String(e), (n === void 0 || n > e.length) && (n = e.length), n -= t.length;
  const r = e.indexOf(t, n);
  return r !== -1 && r === n;
}, Nn = (e) => {
  if (!e) return null;
  if (Y(e)) return e;
  let t = e.length;
  if (!wt(t)) return null;
  const n = new Array(t);
  for (; t-- > 0; )
    n[t] = e[t];
  return n;
}, Pn = /* @__PURE__ */ ((e) => (t) => e && t instanceof e)(typeof Uint8Array < "u" && Ve(Uint8Array)), In = (e, t) => {
  const r = (e && e[Re]).call(e);
  let s;
  for (; (s = r.next()) && !s.done; ) {
    const o = s.value;
    t.call(e, o[0], o[1]);
  }
}, Cn = (e, t) => {
  let n;
  const r = [];
  for (; (n = e.exec(t)) !== null; )
    r.push(n);
  return r;
}, xn = x("HTMLFormElement"), kn = (e) => e.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(n, r, s) {
    return r.toUpperCase() + s;
  }
), Ye = (({ hasOwnProperty: e }) => (t, n) => e.call(t, n))(Object.prototype), Dn = x("RegExp"), bt = (e, t) => {
  const n = Object.getOwnPropertyDescriptors(e), r = {};
  ae(n, (s, o) => {
    let i;
    (i = t(s, o, e)) !== !1 && (r[o] = i || s);
  }), Object.defineProperties(e, r);
}, _n = (e) => {
  bt(e, (t, n) => {
    if (I(e) && ["arguments", "caller", "callee"].indexOf(n) !== -1)
      return !1;
    const r = e[n];
    if (I(r)) {
      if (t.enumerable = !1, "writable" in t) {
        t.writable = !1;
        return;
      }
      t.set || (t.set = () => {
        throw Error("Can not rewrite read-only method '" + n + "'");
      });
    }
  });
}, Un = (e, t) => {
  const n = {}, r = (s) => {
    s.forEach((o) => {
      n[o] = !0;
    });
  };
  return Y(e) ? r(e) : r(String(e).split(t)), n;
}, Fn = () => {
}, Ln = (e, t) => e != null && Number.isFinite(e = +e) ? e : t;
function Bn(e) {
  return !!(e && I(e.append) && e[mt] === "FormData" && e[Re]);
}
const vn = (e) => {
  const t = new Array(10), n = (r, s) => {
    if (Te(r)) {
      if (t.indexOf(r) >= 0)
        return;
      if (!("toJSON" in r)) {
        t[s] = r;
        const o = Y(r) ? [] : {};
        return ae(r, (i, a) => {
          const u = n(i, s + 1);
          !re(u) && (o[a] = u);
        }), t[s] = void 0, o;
      }
    }
    return r;
  };
  return n(e, 0);
}, zn = x("AsyncFunction"), $n = (e) => e && (Te(e) || I(e)) && I(e.then) && I(e.catch), Rt = ((e, t) => e ? setImmediate : t ? ((n, r) => (B.addEventListener("message", ({ source: s, data: o }) => {
  s === B && o === n && r.length && r.shift()();
}, !1), (s) => {
  r.push(s), B.postMessage(n, "*");
}))(`axios@${Math.random()}`, []) : (n) => setTimeout(n))(
  typeof setImmediate == "function",
  I(B.postMessage)
), qn = typeof queueMicrotask < "u" ? queueMicrotask.bind(B) : typeof process < "u" && process.nextTick || Rt, Hn = (e) => e != null && I(e[Re]), c = {
  isArray: Y,
  isArrayBuffer: yt,
  isBuffer: sn,
  isFormData: pn,
  isArrayBufferView: on,
  isString: an,
  isNumber: wt,
  isBoolean: cn,
  isObject: Te,
  isPlainObject: fe,
  isReadableStream: yn,
  isRequest: wn,
  isResponse: gn,
  isHeaders: En,
  isUndefined: re,
  isDate: ln,
  isFile: un,
  isBlob: fn,
  isRegExp: Dn,
  isFunction: I,
  isStream: hn,
  isURLSearchParams: mn,
  isTypedArray: Pn,
  isFileList: dn,
  forEach: ae,
  merge: Ue,
  extend: Rn,
  trim: bn,
  stripBOM: Sn,
  inherits: On,
  toFlatObject: Tn,
  kindOf: Se,
  kindOfTest: x,
  endsWith: An,
  toArray: Nn,
  forEachEntry: In,
  matchAll: Cn,
  isHTMLForm: xn,
  hasOwnProperty: Ye,
  hasOwnProp: Ye,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: bt,
  freezeMethods: _n,
  toObjectSet: Un,
  toCamelCase: kn,
  noop: Fn,
  toFiniteNumber: Ln,
  findKey: gt,
  global: B,
  isContextDefined: Et,
  isSpecCompliantForm: Bn,
  toJSONObject: vn,
  isAsyncFn: zn,
  isThenable: $n,
  setImmediate: Rt,
  asap: qn,
  isIterable: Hn
};
function w(e, t, n, r, s) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = e, this.name = "AxiosError", t && (this.code = t), n && (this.config = n), r && (this.request = r), s && (this.response = s, this.status = s.status ? s.status : null);
}
c.inherits(w, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: c.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const St = w.prototype, Ot = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((e) => {
  Ot[e] = { value: e };
});
Object.defineProperties(w, Ot);
Object.defineProperty(St, "isAxiosError", { value: !0 });
w.from = (e, t, n, r, s, o) => {
  const i = Object.create(St);
  return c.toFlatObject(e, i, function(u) {
    return u !== Error.prototype;
  }, (a) => a !== "isAxiosError"), w.call(i, e.message, t, n, r, s), i.cause = e, i.name = e.name, o && Object.assign(i, o), i;
};
const Mn = null;
function Fe(e) {
  return c.isPlainObject(e) || c.isArray(e);
}
function Tt(e) {
  return c.endsWith(e, "[]") ? e.slice(0, -2) : e;
}
function Ze(e, t, n) {
  return e ? e.concat(t).map(function(s, o) {
    return s = Tt(s), !n && o ? "[" + s + "]" : s;
  }).join(n ? "." : "") : t;
}
function Vn(e) {
  return c.isArray(e) && !e.some(Fe);
}
const jn = c.toFlatObject(c, {}, null, function(t) {
  return /^is[A-Z]/.test(t);
});
function Ae(e, t, n) {
  if (!c.isObject(e))
    throw new TypeError("target must be an object");
  t = t || new FormData(), n = c.toFlatObject(n, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(m, p) {
    return !c.isUndefined(p[m]);
  });
  const r = n.metaTokens, s = n.visitor || l, o = n.dots, i = n.indexes, u = (n.Blob || typeof Blob < "u" && Blob) && c.isSpecCompliantForm(t);
  if (!c.isFunction(s))
    throw new TypeError("visitor must be a function");
  function f(h) {
    if (h === null) return "";
    if (c.isDate(h))
      return h.toISOString();
    if (!u && c.isBlob(h))
      throw new w("Blob is not supported. Use a Buffer instead.");
    return c.isArrayBuffer(h) || c.isTypedArray(h) ? u && typeof Blob == "function" ? new Blob([h]) : Buffer.from(h) : h;
  }
  function l(h, m, p) {
    let b = h;
    if (h && !p && typeof h == "object") {
      if (c.endsWith(m, "{}"))
        m = r ? m : m.slice(0, -2), h = JSON.stringify(h);
      else if (c.isArray(h) && Vn(h) || (c.isFileList(h) || c.endsWith(m, "[]")) && (b = c.toArray(h)))
        return m = Tt(m), b.forEach(function(O, P) {
          !(c.isUndefined(O) || O === null) && t.append(
            // eslint-disable-next-line no-nested-ternary
            i === !0 ? Ze([m], P, o) : i === null ? m : m + "[]",
            f(O)
          );
        }), !1;
    }
    return Fe(h) ? !0 : (t.append(Ze(p, m, o), f(h)), !1);
  }
  const d = [], y = Object.assign(jn, {
    defaultVisitor: l,
    convertValue: f,
    isVisitable: Fe
  });
  function g(h, m) {
    if (!c.isUndefined(h)) {
      if (d.indexOf(h) !== -1)
        throw Error("Circular reference detected in " + m.join("."));
      d.push(h), c.forEach(h, function(b, R) {
        (!(c.isUndefined(b) || b === null) && s.call(
          t,
          b,
          c.isString(R) ? R.trim() : R,
          m,
          y
        )) === !0 && g(b, m ? m.concat(R) : [R]);
      }), d.pop();
    }
  }
  if (!c.isObject(e))
    throw new TypeError("data must be an object");
  return g(e), t;
}
function Qe(e) {
  const t = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g, function(r) {
    return t[r];
  });
}
function je(e, t) {
  this._pairs = [], e && Ae(e, this, t);
}
const At = je.prototype;
At.append = function(t, n) {
  this._pairs.push([t, n]);
};
At.toString = function(t) {
  const n = t ? function(r) {
    return t.call(this, r, Qe);
  } : Qe;
  return this._pairs.map(function(s) {
    return n(s[0]) + "=" + n(s[1]);
  }, "").join("&");
};
function Jn(e) {
  return encodeURIComponent(e).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function Nt(e, t, n) {
  if (!t)
    return e;
  const r = n && n.encode || Jn;
  c.isFunction(n) && (n = {
    serialize: n
  });
  const s = n && n.serialize;
  let o;
  if (s ? o = s(t, n) : o = c.isURLSearchParams(t) ? t.toString() : new je(t, n).toString(r), o) {
    const i = e.indexOf("#");
    i !== -1 && (e = e.slice(0, i)), e += (e.indexOf("?") === -1 ? "?" : "&") + o;
  }
  return e;
}
class et {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(t, n, r) {
    return this.handlers.push({
      fulfilled: t,
      rejected: n,
      synchronous: r ? r.synchronous : !1,
      runWhen: r ? r.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(t) {
    this.handlers[t] && (this.handlers[t] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(t) {
    c.forEach(this.handlers, function(r) {
      r !== null && t(r);
    });
  }
}
const Pt = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, Kn = typeof URLSearchParams < "u" ? URLSearchParams : je, Wn = typeof FormData < "u" ? FormData : null, Gn = typeof Blob < "u" ? Blob : null, Xn = {
  isBrowser: !0,
  classes: {
    URLSearchParams: Kn,
    FormData: Wn,
    Blob: Gn
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, Je = typeof window < "u" && typeof document < "u", Le = typeof navigator == "object" && navigator || void 0, Yn = Je && (!Le || ["ReactNative", "NativeScript", "NS"].indexOf(Le.product) < 0), Zn = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", Qn = Je && window.location.href || "http://localhost", er = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: Je,
  hasStandardBrowserEnv: Yn,
  hasStandardBrowserWebWorkerEnv: Zn,
  navigator: Le,
  origin: Qn
}, Symbol.toStringTag, { value: "Module" })), N = {
  ...er,
  ...Xn
};
function tr(e, t) {
  return Ae(e, new N.classes.URLSearchParams(), Object.assign({
    visitor: function(n, r, s, o) {
      return N.isNode && c.isBuffer(n) ? (this.append(r, n.toString("base64")), !1) : o.defaultVisitor.apply(this, arguments);
    }
  }, t));
}
function nr(e) {
  return c.matchAll(/\w+|\[(\w*)]/g, e).map((t) => t[0] === "[]" ? "" : t[1] || t[0]);
}
function rr(e) {
  const t = {}, n = Object.keys(e);
  let r;
  const s = n.length;
  let o;
  for (r = 0; r < s; r++)
    o = n[r], t[o] = e[o];
  return t;
}
function It(e) {
  function t(n, r, s, o) {
    let i = n[o++];
    if (i === "__proto__") return !0;
    const a = Number.isFinite(+i), u = o >= n.length;
    return i = !i && c.isArray(s) ? s.length : i, u ? (c.hasOwnProp(s, i) ? s[i] = [s[i], r] : s[i] = r, !a) : ((!s[i] || !c.isObject(s[i])) && (s[i] = []), t(n, r, s[i], o) && c.isArray(s[i]) && (s[i] = rr(s[i])), !a);
  }
  if (c.isFormData(e) && c.isFunction(e.entries)) {
    const n = {};
    return c.forEachEntry(e, (r, s) => {
      t(nr(r), s, n, 0);
    }), n;
  }
  return null;
}
function sr(e, t, n) {
  if (c.isString(e))
    try {
      return (t || JSON.parse)(e), c.trim(e);
    } catch (r) {
      if (r.name !== "SyntaxError")
        throw r;
    }
  return (n || JSON.stringify)(e);
}
const ce = {
  transitional: Pt,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(t, n) {
    const r = n.getContentType() || "", s = r.indexOf("application/json") > -1, o = c.isObject(t);
    if (o && c.isHTMLForm(t) && (t = new FormData(t)), c.isFormData(t))
      return s ? JSON.stringify(It(t)) : t;
    if (c.isArrayBuffer(t) || c.isBuffer(t) || c.isStream(t) || c.isFile(t) || c.isBlob(t) || c.isReadableStream(t))
      return t;
    if (c.isArrayBufferView(t))
      return t.buffer;
    if (c.isURLSearchParams(t))
      return n.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), t.toString();
    let a;
    if (o) {
      if (r.indexOf("application/x-www-form-urlencoded") > -1)
        return tr(t, this.formSerializer).toString();
      if ((a = c.isFileList(t)) || r.indexOf("multipart/form-data") > -1) {
        const u = this.env && this.env.FormData;
        return Ae(
          a ? { "files[]": t } : t,
          u && new u(),
          this.formSerializer
        );
      }
    }
    return o || s ? (n.setContentType("application/json", !1), sr(t)) : t;
  }],
  transformResponse: [function(t) {
    const n = this.transitional || ce.transitional, r = n && n.forcedJSONParsing, s = this.responseType === "json";
    if (c.isResponse(t) || c.isReadableStream(t))
      return t;
    if (t && c.isString(t) && (r && !this.responseType || s)) {
      const i = !(n && n.silentJSONParsing) && s;
      try {
        return JSON.parse(t);
      } catch (a) {
        if (i)
          throw a.name === "SyntaxError" ? w.from(a, w.ERR_BAD_RESPONSE, this, null, this.response) : a;
      }
    }
    return t;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: N.classes.FormData,
    Blob: N.classes.Blob
  },
  validateStatus: function(t) {
    return t >= 200 && t < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
c.forEach(["delete", "get", "head", "post", "put", "patch"], (e) => {
  ce.headers[e] = {};
});
const or = c.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), ir = (e) => {
  const t = {};
  let n, r, s;
  return e && e.split(`
`).forEach(function(i) {
    s = i.indexOf(":"), n = i.substring(0, s).trim().toLowerCase(), r = i.substring(s + 1).trim(), !(!n || t[n] && or[n]) && (n === "set-cookie" ? t[n] ? t[n].push(r) : t[n] = [r] : t[n] = t[n] ? t[n] + ", " + r : r);
  }), t;
}, tt = Symbol("internals");
function te(e) {
  return e && String(e).trim().toLowerCase();
}
function de(e) {
  return e === !1 || e == null ? e : c.isArray(e) ? e.map(de) : String(e);
}
function ar(e) {
  const t = /* @__PURE__ */ Object.create(null), n = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let r;
  for (; r = n.exec(e); )
    t[r[1]] = r[2];
  return t;
}
const cr = (e) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());
function xe(e, t, n, r, s) {
  if (c.isFunction(r))
    return r.call(this, t, n);
  if (s && (t = n), !!c.isString(t)) {
    if (c.isString(r))
      return t.indexOf(r) !== -1;
    if (c.isRegExp(r))
      return r.test(t);
  }
}
function lr(e) {
  return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (t, n, r) => n.toUpperCase() + r);
}
function ur(e, t) {
  const n = c.toCamelCase(" " + t);
  ["get", "set", "has"].forEach((r) => {
    Object.defineProperty(e, r + n, {
      value: function(s, o, i) {
        return this[r].call(this, t, s, o, i);
      },
      configurable: !0
    });
  });
}
let C = class {
  constructor(t) {
    t && this.set(t);
  }
  set(t, n, r) {
    const s = this;
    function o(a, u, f) {
      const l = te(u);
      if (!l)
        throw new Error("header name must be a non-empty string");
      const d = c.findKey(s, l);
      (!d || s[d] === void 0 || f === !0 || f === void 0 && s[d] !== !1) && (s[d || u] = de(a));
    }
    const i = (a, u) => c.forEach(a, (f, l) => o(f, l, u));
    if (c.isPlainObject(t) || t instanceof this.constructor)
      i(t, n);
    else if (c.isString(t) && (t = t.trim()) && !cr(t))
      i(ir(t), n);
    else if (c.isObject(t) && c.isIterable(t)) {
      let a = {}, u, f;
      for (const l of t) {
        if (!c.isArray(l))
          throw TypeError("Object iterator must return a key-value pair");
        a[f = l[0]] = (u = a[f]) ? c.isArray(u) ? [...u, l[1]] : [u, l[1]] : l[1];
      }
      i(a, n);
    } else
      t != null && o(n, t, r);
    return this;
  }
  get(t, n) {
    if (t = te(t), t) {
      const r = c.findKey(this, t);
      if (r) {
        const s = this[r];
        if (!n)
          return s;
        if (n === !0)
          return ar(s);
        if (c.isFunction(n))
          return n.call(this, s, r);
        if (c.isRegExp(n))
          return n.exec(s);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(t, n) {
    if (t = te(t), t) {
      const r = c.findKey(this, t);
      return !!(r && this[r] !== void 0 && (!n || xe(this, this[r], r, n)));
    }
    return !1;
  }
  delete(t, n) {
    const r = this;
    let s = !1;
    function o(i) {
      if (i = te(i), i) {
        const a = c.findKey(r, i);
        a && (!n || xe(r, r[a], a, n)) && (delete r[a], s = !0);
      }
    }
    return c.isArray(t) ? t.forEach(o) : o(t), s;
  }
  clear(t) {
    const n = Object.keys(this);
    let r = n.length, s = !1;
    for (; r--; ) {
      const o = n[r];
      (!t || xe(this, this[o], o, t, !0)) && (delete this[o], s = !0);
    }
    return s;
  }
  normalize(t) {
    const n = this, r = {};
    return c.forEach(this, (s, o) => {
      const i = c.findKey(r, o);
      if (i) {
        n[i] = de(s), delete n[o];
        return;
      }
      const a = t ? lr(o) : String(o).trim();
      a !== o && delete n[o], n[a] = de(s), r[a] = !0;
    }), this;
  }
  concat(...t) {
    return this.constructor.concat(this, ...t);
  }
  toJSON(t) {
    const n = /* @__PURE__ */ Object.create(null);
    return c.forEach(this, (r, s) => {
      r != null && r !== !1 && (n[s] = t && c.isArray(r) ? r.join(", ") : r);
    }), n;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([t, n]) => t + ": " + n).join(`
`);
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(t) {
    return t instanceof this ? t : new this(t);
  }
  static concat(t, ...n) {
    const r = new this(t);
    return n.forEach((s) => r.set(s)), r;
  }
  static accessor(t) {
    const r = (this[tt] = this[tt] = {
      accessors: {}
    }).accessors, s = this.prototype;
    function o(i) {
      const a = te(i);
      r[a] || (ur(s, i), r[a] = !0);
    }
    return c.isArray(t) ? t.forEach(o) : o(t), this;
  }
};
C.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
c.reduceDescriptors(C.prototype, ({ value: e }, t) => {
  let n = t[0].toUpperCase() + t.slice(1);
  return {
    get: () => e,
    set(r) {
      this[n] = r;
    }
  };
});
c.freezeMethods(C);
function ke(e, t) {
  const n = this || ce, r = t || n, s = C.from(r.headers);
  let o = r.data;
  return c.forEach(e, function(a) {
    o = a.call(n, o, s.normalize(), t ? t.status : void 0);
  }), s.normalize(), o;
}
function Ct(e) {
  return !!(e && e.__CANCEL__);
}
function Z(e, t, n) {
  w.call(this, e ?? "canceled", w.ERR_CANCELED, t, n), this.name = "CanceledError";
}
c.inherits(Z, w, {
  __CANCEL__: !0
});
function xt(e, t, n) {
  const r = n.config.validateStatus;
  !n.status || !r || r(n.status) ? e(n) : t(new w(
    "Request failed with status code " + n.status,
    [w.ERR_BAD_REQUEST, w.ERR_BAD_RESPONSE][Math.floor(n.status / 100) - 4],
    n.config,
    n.request,
    n
  ));
}
function fr(e) {
  const t = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
  return t && t[1] || "";
}
function dr(e, t) {
  e = e || 10;
  const n = new Array(e), r = new Array(e);
  let s = 0, o = 0, i;
  return t = t !== void 0 ? t : 1e3, function(u) {
    const f = Date.now(), l = r[o];
    i || (i = f), n[s] = u, r[s] = f;
    let d = o, y = 0;
    for (; d !== s; )
      y += n[d++], d = d % e;
    if (s = (s + 1) % e, s === o && (o = (o + 1) % e), f - i < t)
      return;
    const g = l && f - l;
    return g ? Math.round(y * 1e3 / g) : void 0;
  };
}
function hr(e, t) {
  let n = 0, r = 1e3 / t, s, o;
  const i = (f, l = Date.now()) => {
    n = l, s = null, o && (clearTimeout(o), o = null), e.apply(null, f);
  };
  return [(...f) => {
    const l = Date.now(), d = l - n;
    d >= r ? i(f, l) : (s = f, o || (o = setTimeout(() => {
      o = null, i(s);
    }, r - d)));
  }, () => s && i(s)];
}
const me = (e, t, n = 3) => {
  let r = 0;
  const s = dr(50, 250);
  return hr((o) => {
    const i = o.loaded, a = o.lengthComputable ? o.total : void 0, u = i - r, f = s(u), l = i <= a;
    r = i;
    const d = {
      loaded: i,
      total: a,
      progress: a ? i / a : void 0,
      bytes: u,
      rate: f || void 0,
      estimated: f && a && l ? (a - i) / f : void 0,
      event: o,
      lengthComputable: a != null,
      [t ? "download" : "upload"]: !0
    };
    e(d);
  }, n);
}, nt = (e, t) => {
  const n = e != null;
  return [(r) => t[0]({
    lengthComputable: n,
    total: e,
    loaded: r
  }), t[1]];
}, rt = (e) => (...t) => c.asap(() => e(...t)), pr = N.hasStandardBrowserEnv ? /* @__PURE__ */ ((e, t) => (n) => (n = new URL(n, N.origin), e.protocol === n.protocol && e.host === n.host && (t || e.port === n.port)))(
  new URL(N.origin),
  N.navigator && /(msie|trident)/i.test(N.navigator.userAgent)
) : () => !0, mr = N.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(e, t, n, r, s, o) {
      const i = [e + "=" + encodeURIComponent(t)];
      c.isNumber(n) && i.push("expires=" + new Date(n).toGMTString()), c.isString(r) && i.push("path=" + r), c.isString(s) && i.push("domain=" + s), o === !0 && i.push("secure"), document.cookie = i.join("; ");
    },
    read(e) {
      const t = document.cookie.match(new RegExp("(^|;\\s*)(" + e + ")=([^;]*)"));
      return t ? decodeURIComponent(t[3]) : null;
    },
    remove(e) {
      this.write(e, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function yr(e) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
}
function wr(e, t) {
  return t ? e.replace(/\/?\/$/, "") + "/" + t.replace(/^\/+/, "") : e;
}
function kt(e, t, n) {
  let r = !yr(t);
  return e && (r || n == !1) ? wr(e, t) : t;
}
const st = (e) => e instanceof C ? { ...e } : e;
function q(e, t) {
  t = t || {};
  const n = {};
  function r(f, l, d, y) {
    return c.isPlainObject(f) && c.isPlainObject(l) ? c.merge.call({ caseless: y }, f, l) : c.isPlainObject(l) ? c.merge({}, l) : c.isArray(l) ? l.slice() : l;
  }
  function s(f, l, d, y) {
    if (c.isUndefined(l)) {
      if (!c.isUndefined(f))
        return r(void 0, f, d, y);
    } else return r(f, l, d, y);
  }
  function o(f, l) {
    if (!c.isUndefined(l))
      return r(void 0, l);
  }
  function i(f, l) {
    if (c.isUndefined(l)) {
      if (!c.isUndefined(f))
        return r(void 0, f);
    } else return r(void 0, l);
  }
  function a(f, l, d) {
    if (d in t)
      return r(f, l);
    if (d in e)
      return r(void 0, f);
  }
  const u = {
    url: o,
    method: o,
    data: o,
    baseURL: i,
    transformRequest: i,
    transformResponse: i,
    paramsSerializer: i,
    timeout: i,
    timeoutMessage: i,
    withCredentials: i,
    withXSRFToken: i,
    adapter: i,
    responseType: i,
    xsrfCookieName: i,
    xsrfHeaderName: i,
    onUploadProgress: i,
    onDownloadProgress: i,
    decompress: i,
    maxContentLength: i,
    maxBodyLength: i,
    beforeRedirect: i,
    transport: i,
    httpAgent: i,
    httpsAgent: i,
    cancelToken: i,
    socketPath: i,
    responseEncoding: i,
    validateStatus: a,
    headers: (f, l, d) => s(st(f), st(l), d, !0)
  };
  return c.forEach(Object.keys(Object.assign({}, e, t)), function(l) {
    const d = u[l] || s, y = d(e[l], t[l], l);
    c.isUndefined(y) && d !== a || (n[l] = y);
  }), n;
}
const Dt = (e) => {
  const t = q({}, e);
  let { data: n, withXSRFToken: r, xsrfHeaderName: s, xsrfCookieName: o, headers: i, auth: a } = t;
  t.headers = i = C.from(i), t.url = Nt(kt(t.baseURL, t.url, t.allowAbsoluteUrls), e.params, e.paramsSerializer), a && i.set(
    "Authorization",
    "Basic " + btoa((a.username || "") + ":" + (a.password ? unescape(encodeURIComponent(a.password)) : ""))
  );
  let u;
  if (c.isFormData(n)) {
    if (N.hasStandardBrowserEnv || N.hasStandardBrowserWebWorkerEnv)
      i.setContentType(void 0);
    else if ((u = i.getContentType()) !== !1) {
      const [f, ...l] = u ? u.split(";").map((d) => d.trim()).filter(Boolean) : [];
      i.setContentType([f || "multipart/form-data", ...l].join("; "));
    }
  }
  if (N.hasStandardBrowserEnv && (r && c.isFunction(r) && (r = r(t)), r || r !== !1 && pr(t.url))) {
    const f = s && o && mr.read(o);
    f && i.set(s, f);
  }
  return t;
}, gr = typeof XMLHttpRequest < "u", Er = gr && function(e) {
  return new Promise(function(n, r) {
    const s = Dt(e);
    let o = s.data;
    const i = C.from(s.headers).normalize();
    let { responseType: a, onUploadProgress: u, onDownloadProgress: f } = s, l, d, y, g, h;
    function m() {
      g && g(), h && h(), s.cancelToken && s.cancelToken.unsubscribe(l), s.signal && s.signal.removeEventListener("abort", l);
    }
    let p = new XMLHttpRequest();
    p.open(s.method.toUpperCase(), s.url, !0), p.timeout = s.timeout;
    function b() {
      if (!p)
        return;
      const O = C.from(
        "getAllResponseHeaders" in p && p.getAllResponseHeaders()
      ), S = {
        data: !a || a === "text" || a === "json" ? p.responseText : p.response,
        status: p.status,
        statusText: p.statusText,
        headers: O,
        config: e,
        request: p
      };
      xt(function(F) {
        n(F), m();
      }, function(F) {
        r(F), m();
      }, S), p = null;
    }
    "onloadend" in p ? p.onloadend = b : p.onreadystatechange = function() {
      !p || p.readyState !== 4 || p.status === 0 && !(p.responseURL && p.responseURL.indexOf("file:") === 0) || setTimeout(b);
    }, p.onabort = function() {
      p && (r(new w("Request aborted", w.ECONNABORTED, e, p)), p = null);
    }, p.onerror = function() {
      r(new w("Network Error", w.ERR_NETWORK, e, p)), p = null;
    }, p.ontimeout = function() {
      let P = s.timeout ? "timeout of " + s.timeout + "ms exceeded" : "timeout exceeded";
      const S = s.transitional || Pt;
      s.timeoutErrorMessage && (P = s.timeoutErrorMessage), r(new w(
        P,
        S.clarifyTimeoutError ? w.ETIMEDOUT : w.ECONNABORTED,
        e,
        p
      )), p = null;
    }, o === void 0 && i.setContentType(null), "setRequestHeader" in p && c.forEach(i.toJSON(), function(P, S) {
      p.setRequestHeader(S, P);
    }), c.isUndefined(s.withCredentials) || (p.withCredentials = !!s.withCredentials), a && a !== "json" && (p.responseType = s.responseType), f && ([y, h] = me(f, !0), p.addEventListener("progress", y)), u && p.upload && ([d, g] = me(u), p.upload.addEventListener("progress", d), p.upload.addEventListener("loadend", g)), (s.cancelToken || s.signal) && (l = (O) => {
      p && (r(!O || O.type ? new Z(null, e, p) : O), p.abort(), p = null);
    }, s.cancelToken && s.cancelToken.subscribe(l), s.signal && (s.signal.aborted ? l() : s.signal.addEventListener("abort", l)));
    const R = fr(s.url);
    if (R && N.protocols.indexOf(R) === -1) {
      r(new w("Unsupported protocol " + R + ":", w.ERR_BAD_REQUEST, e));
      return;
    }
    p.send(o || null);
  });
}, br = (e, t) => {
  const { length: n } = e = e ? e.filter(Boolean) : [];
  if (t || n) {
    let r = new AbortController(), s;
    const o = function(f) {
      if (!s) {
        s = !0, a();
        const l = f instanceof Error ? f : this.reason;
        r.abort(l instanceof w ? l : new Z(l instanceof Error ? l.message : l));
      }
    };
    let i = t && setTimeout(() => {
      i = null, o(new w(`timeout ${t} of ms exceeded`, w.ETIMEDOUT));
    }, t);
    const a = () => {
      e && (i && clearTimeout(i), i = null, e.forEach((f) => {
        f.unsubscribe ? f.unsubscribe(o) : f.removeEventListener("abort", o);
      }), e = null);
    };
    e.forEach((f) => f.addEventListener("abort", o));
    const { signal: u } = r;
    return u.unsubscribe = () => c.asap(a), u;
  }
}, Rr = function* (e, t) {
  let n = e.byteLength;
  if (n < t) {
    yield e;
    return;
  }
  let r = 0, s;
  for (; r < n; )
    s = r + t, yield e.slice(r, s), r = s;
}, Sr = async function* (e, t) {
  for await (const n of Or(e))
    yield* Rr(n, t);
}, Or = async function* (e) {
  if (e[Symbol.asyncIterator]) {
    yield* e;
    return;
  }
  const t = e.getReader();
  try {
    for (; ; ) {
      const { done: n, value: r } = await t.read();
      if (n)
        break;
      yield r;
    }
  } finally {
    await t.cancel();
  }
}, ot = (e, t, n, r) => {
  const s = Sr(e, t);
  let o = 0, i, a = (u) => {
    i || (i = !0, r && r(u));
  };
  return new ReadableStream({
    async pull(u) {
      try {
        const { done: f, value: l } = await s.next();
        if (f) {
          a(), u.close();
          return;
        }
        let d = l.byteLength;
        if (n) {
          let y = o += d;
          n(y);
        }
        u.enqueue(new Uint8Array(l));
      } catch (f) {
        throw a(f), f;
      }
    },
    cancel(u) {
      return a(u), s.return();
    }
  }, {
    highWaterMark: 2
  });
}, Ne = typeof fetch == "function" && typeof Request == "function" && typeof Response == "function", _t = Ne && typeof ReadableStream == "function", Tr = Ne && (typeof TextEncoder == "function" ? /* @__PURE__ */ ((e) => (t) => e.encode(t))(new TextEncoder()) : async (e) => new Uint8Array(await new Response(e).arrayBuffer())), Ut = (e, ...t) => {
  try {
    return !!e(...t);
  } catch {
    return !1;
  }
}, Ar = _t && Ut(() => {
  let e = !1;
  const t = new Request(N.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      return e = !0, "half";
    }
  }).headers.has("Content-Type");
  return e && !t;
}), it = 64 * 1024, Be = _t && Ut(() => c.isReadableStream(new Response("").body)), ye = {
  stream: Be && ((e) => e.body)
};
Ne && ((e) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((t) => {
    !ye[t] && (ye[t] = c.isFunction(e[t]) ? (n) => n[t]() : (n, r) => {
      throw new w(`Response type '${t}' is not supported`, w.ERR_NOT_SUPPORT, r);
    });
  });
})(new Response());
const Nr = async (e) => {
  if (e == null)
    return 0;
  if (c.isBlob(e))
    return e.size;
  if (c.isSpecCompliantForm(e))
    return (await new Request(N.origin, {
      method: "POST",
      body: e
    }).arrayBuffer()).byteLength;
  if (c.isArrayBufferView(e) || c.isArrayBuffer(e))
    return e.byteLength;
  if (c.isURLSearchParams(e) && (e = e + ""), c.isString(e))
    return (await Tr(e)).byteLength;
}, Pr = async (e, t) => {
  const n = c.toFiniteNumber(e.getContentLength());
  return n ?? Nr(t);
}, Ir = Ne && (async (e) => {
  let {
    url: t,
    method: n,
    data: r,
    signal: s,
    cancelToken: o,
    timeout: i,
    onDownloadProgress: a,
    onUploadProgress: u,
    responseType: f,
    headers: l,
    withCredentials: d = "same-origin",
    fetchOptions: y
  } = Dt(e);
  f = f ? (f + "").toLowerCase() : "text";
  let g = br([s, o && o.toAbortSignal()], i), h;
  const m = g && g.unsubscribe && (() => {
    g.unsubscribe();
  });
  let p;
  try {
    if (u && Ar && n !== "get" && n !== "head" && (p = await Pr(l, r)) !== 0) {
      let S = new Request(t, {
        method: "POST",
        body: r,
        duplex: "half"
      }), U;
      if (c.isFormData(r) && (U = S.headers.get("content-type")) && l.setContentType(U), S.body) {
        const [F, H] = nt(
          p,
          me(rt(u))
        );
        r = ot(S.body, it, F, H);
      }
    }
    c.isString(d) || (d = d ? "include" : "omit");
    const b = "credentials" in Request.prototype;
    h = new Request(t, {
      ...y,
      signal: g,
      method: n.toUpperCase(),
      headers: l.normalize().toJSON(),
      body: r,
      duplex: "half",
      credentials: b ? d : void 0
    });
    let R = await fetch(h);
    const O = Be && (f === "stream" || f === "response");
    if (Be && (a || O && m)) {
      const S = {};
      ["status", "statusText", "headers"].forEach((We) => {
        S[We] = R[We];
      });
      const U = c.toFiniteNumber(R.headers.get("content-length")), [F, H] = a && nt(
        U,
        me(rt(a), !0)
      ) || [];
      R = new Response(
        ot(R.body, it, F, () => {
          H && H(), m && m();
        }),
        S
      );
    }
    f = f || "text";
    let P = await ye[c.findKey(ye, f) || "text"](R, e);
    return !O && m && m(), await new Promise((S, U) => {
      xt(S, U, {
        data: P,
        headers: C.from(R.headers),
        status: R.status,
        statusText: R.statusText,
        config: e,
        request: h
      });
    });
  } catch (b) {
    throw m && m(), b && b.name === "TypeError" && /Load failed|fetch/i.test(b.message) ? Object.assign(
      new w("Network Error", w.ERR_NETWORK, e, h),
      {
        cause: b.cause || b
      }
    ) : w.from(b, b && b.code, e, h);
  }
}), ve = {
  http: Mn,
  xhr: Er,
  fetch: Ir
};
c.forEach(ve, (e, t) => {
  if (e) {
    try {
      Object.defineProperty(e, "name", { value: t });
    } catch {
    }
    Object.defineProperty(e, "adapterName", { value: t });
  }
});
const at = (e) => `- ${e}`, Cr = (e) => c.isFunction(e) || e === null || e === !1, Ft = {
  getAdapter: (e) => {
    e = c.isArray(e) ? e : [e];
    const { length: t } = e;
    let n, r;
    const s = {};
    for (let o = 0; o < t; o++) {
      n = e[o];
      let i;
      if (r = n, !Cr(n) && (r = ve[(i = String(n)).toLowerCase()], r === void 0))
        throw new w(`Unknown adapter '${i}'`);
      if (r)
        break;
      s[i || "#" + o] = r;
    }
    if (!r) {
      const o = Object.entries(s).map(
        ([a, u]) => `adapter ${a} ` + (u === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let i = t ? o.length > 1 ? `since :
` + o.map(at).join(`
`) : " " + at(o[0]) : "as no adapter specified";
      throw new w(
        "There is no suitable adapter to dispatch the request " + i,
        "ERR_NOT_SUPPORT"
      );
    }
    return r;
  },
  adapters: ve
};
function De(e) {
  if (e.cancelToken && e.cancelToken.throwIfRequested(), e.signal && e.signal.aborted)
    throw new Z(null, e);
}
function ct(e) {
  return De(e), e.headers = C.from(e.headers), e.data = ke.call(
    e,
    e.transformRequest
  ), ["post", "put", "patch"].indexOf(e.method) !== -1 && e.headers.setContentType("application/x-www-form-urlencoded", !1), Ft.getAdapter(e.adapter || ce.adapter)(e).then(function(r) {
    return De(e), r.data = ke.call(
      e,
      e.transformResponse,
      r
    ), r.headers = C.from(r.headers), r;
  }, function(r) {
    return Ct(r) || (De(e), r && r.response && (r.response.data = ke.call(
      e,
      e.transformResponse,
      r.response
    ), r.response.headers = C.from(r.response.headers))), Promise.reject(r);
  });
}
const Lt = "1.9.0", Pe = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((e, t) => {
  Pe[e] = function(r) {
    return typeof r === e || "a" + (t < 1 ? "n " : " ") + e;
  };
});
const lt = {};
Pe.transitional = function(t, n, r) {
  function s(o, i) {
    return "[Axios v" + Lt + "] Transitional option '" + o + "'" + i + (r ? ". " + r : "");
  }
  return (o, i, a) => {
    if (t === !1)
      throw new w(
        s(i, " has been removed" + (n ? " in " + n : "")),
        w.ERR_DEPRECATED
      );
    return n && !lt[i] && (lt[i] = !0, console.warn(
      s(
        i,
        " has been deprecated since v" + n + " and will be removed in the near future"
      )
    )), t ? t(o, i, a) : !0;
  };
};
Pe.spelling = function(t) {
  return (n, r) => (console.warn(`${r} is likely a misspelling of ${t}`), !0);
};
function xr(e, t, n) {
  if (typeof e != "object")
    throw new w("options must be an object", w.ERR_BAD_OPTION_VALUE);
  const r = Object.keys(e);
  let s = r.length;
  for (; s-- > 0; ) {
    const o = r[s], i = t[o];
    if (i) {
      const a = e[o], u = a === void 0 || i(a, o, e);
      if (u !== !0)
        throw new w("option " + o + " must be " + u, w.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (n !== !0)
      throw new w("Unknown option " + o, w.ERR_BAD_OPTION);
  }
}
const he = {
  assertOptions: xr,
  validators: Pe
}, D = he.validators;
let $ = class {
  constructor(t) {
    this.defaults = t || {}, this.interceptors = {
      request: new et(),
      response: new et()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(t, n) {
    try {
      return await this._request(t, n);
    } catch (r) {
      if (r instanceof Error) {
        let s = {};
        Error.captureStackTrace ? Error.captureStackTrace(s) : s = new Error();
        const o = s.stack ? s.stack.replace(/^.+\n/, "") : "";
        try {
          r.stack ? o && !String(r.stack).endsWith(o.replace(/^.+\n.+\n/, "")) && (r.stack += `
` + o) : r.stack = o;
        } catch {
        }
      }
      throw r;
    }
  }
  _request(t, n) {
    typeof t == "string" ? (n = n || {}, n.url = t) : n = t || {}, n = q(this.defaults, n);
    const { transitional: r, paramsSerializer: s, headers: o } = n;
    r !== void 0 && he.assertOptions(r, {
      silentJSONParsing: D.transitional(D.boolean),
      forcedJSONParsing: D.transitional(D.boolean),
      clarifyTimeoutError: D.transitional(D.boolean)
    }, !1), s != null && (c.isFunction(s) ? n.paramsSerializer = {
      serialize: s
    } : he.assertOptions(s, {
      encode: D.function,
      serialize: D.function
    }, !0)), n.allowAbsoluteUrls !== void 0 || (this.defaults.allowAbsoluteUrls !== void 0 ? n.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls : n.allowAbsoluteUrls = !0), he.assertOptions(n, {
      baseUrl: D.spelling("baseURL"),
      withXsrfToken: D.spelling("withXSRFToken")
    }, !0), n.method = (n.method || this.defaults.method || "get").toLowerCase();
    let i = o && c.merge(
      o.common,
      o[n.method]
    );
    o && c.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (h) => {
        delete o[h];
      }
    ), n.headers = C.concat(i, o);
    const a = [];
    let u = !0;
    this.interceptors.request.forEach(function(m) {
      typeof m.runWhen == "function" && m.runWhen(n) === !1 || (u = u && m.synchronous, a.unshift(m.fulfilled, m.rejected));
    });
    const f = [];
    this.interceptors.response.forEach(function(m) {
      f.push(m.fulfilled, m.rejected);
    });
    let l, d = 0, y;
    if (!u) {
      const h = [ct.bind(this), void 0];
      for (h.unshift.apply(h, a), h.push.apply(h, f), y = h.length, l = Promise.resolve(n); d < y; )
        l = l.then(h[d++], h[d++]);
      return l;
    }
    y = a.length;
    let g = n;
    for (d = 0; d < y; ) {
      const h = a[d++], m = a[d++];
      try {
        g = h(g);
      } catch (p) {
        m.call(this, p);
        break;
      }
    }
    try {
      l = ct.call(this, g);
    } catch (h) {
      return Promise.reject(h);
    }
    for (d = 0, y = f.length; d < y; )
      l = l.then(f[d++], f[d++]);
    return l;
  }
  getUri(t) {
    t = q(this.defaults, t);
    const n = kt(t.baseURL, t.url, t.allowAbsoluteUrls);
    return Nt(n, t.params, t.paramsSerializer);
  }
};
c.forEach(["delete", "get", "head", "options"], function(t) {
  $.prototype[t] = function(n, r) {
    return this.request(q(r || {}, {
      method: t,
      url: n,
      data: (r || {}).data
    }));
  };
});
c.forEach(["post", "put", "patch"], function(t) {
  function n(r) {
    return function(o, i, a) {
      return this.request(q(a || {}, {
        method: t,
        headers: r ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: o,
        data: i
      }));
    };
  }
  $.prototype[t] = n(), $.prototype[t + "Form"] = n(!0);
});
let kr = class Bt {
  constructor(t) {
    if (typeof t != "function")
      throw new TypeError("executor must be a function.");
    let n;
    this.promise = new Promise(function(o) {
      n = o;
    });
    const r = this;
    this.promise.then((s) => {
      if (!r._listeners) return;
      let o = r._listeners.length;
      for (; o-- > 0; )
        r._listeners[o](s);
      r._listeners = null;
    }), this.promise.then = (s) => {
      let o;
      const i = new Promise((a) => {
        r.subscribe(a), o = a;
      }).then(s);
      return i.cancel = function() {
        r.unsubscribe(o);
      }, i;
    }, t(function(o, i, a) {
      r.reason || (r.reason = new Z(o, i, a), n(r.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(t) {
    if (this.reason) {
      t(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(t) : this._listeners = [t];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(t) {
    if (!this._listeners)
      return;
    const n = this._listeners.indexOf(t);
    n !== -1 && this._listeners.splice(n, 1);
  }
  toAbortSignal() {
    const t = new AbortController(), n = (r) => {
      t.abort(r);
    };
    return this.subscribe(n), t.signal.unsubscribe = () => this.unsubscribe(n), t.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let t;
    return {
      token: new Bt(function(s) {
        t = s;
      }),
      cancel: t
    };
  }
};
function Dr(e) {
  return function(n) {
    return e.apply(null, n);
  };
}
function _r(e) {
  return c.isObject(e) && e.isAxiosError === !0;
}
const ze = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(ze).forEach(([e, t]) => {
  ze[t] = e;
});
function vt(e) {
  const t = new $(e), n = pt($.prototype.request, t);
  return c.extend(n, $.prototype, t, { allOwnKeys: !0 }), c.extend(n, t, null, { allOwnKeys: !0 }), n.create = function(s) {
    return vt(q(e, s));
  }, n;
}
const T = vt(ce);
T.Axios = $;
T.CanceledError = Z;
T.CancelToken = kr;
T.isCancel = Ct;
T.VERSION = Lt;
T.toFormData = Ae;
T.AxiosError = w;
T.Cancel = T.CanceledError;
T.all = function(t) {
  return Promise.all(t);
};
T.spread = Dr;
T.isAxiosError = _r;
T.mergeConfig = q;
T.AxiosHeaders = C;
T.formToJSON = (e) => It(c.isHTMLForm(e) ? new FormData(e) : e);
T.getAdapter = Ft.getAdapter;
T.HttpStatusCode = ze;
T.default = T;
const {
  Axios: gs,
  AxiosError: Es,
  CanceledError: bs,
  isCancel: Rs,
  CancelToken: Ss,
  VERSION: Os,
  all: Ts,
  Cancel: As,
  isAxiosError: Ns,
  spread: Ps,
  toFormData: Is,
  AxiosHeaders: Cs,
  HttpStatusCode: xs,
  formToJSON: ks,
  getAdapter: Ds,
  mergeConfig: _s
} = T;
var v, z, G, Ee, be;
class Ur {
  /**
   * Create a new SyncEngine instance
   * @param options Configuration options for the Repo
   */
  constructor(t = { url: "" }) {
    M(this, v);
    M(this, z);
    M(this, G, !1);
    M(this, Ee, async () => {
      let t = 0;
      return new Promise(async (n, r) => {
        const s = setInterval(async () => {
          t++, k(this, z) && (clearInterval(s), n(!0)), t > 100 && r();
        }, 200);
      });
    });
    M(this, be, async (t, n) => {
      if (!t || t.trim() === "")
        return A.warn("Creating new root document (no URL provided)"), n.create().documentId;
      try {
        const r = await T.get(`${t}/.well-known/root.json`);
        if (!r.data)
          throw new Error("No data was returned from the url provided");
        const s = r.data.rootId;
        if (!s)
          throw new Error("No root was returned from the url provided");
        return (await n.find(s)).doc() ? s : (A.warn("Creating new root document (url did not return a rootId)"), n.create().documentId);
      } catch (r) {
        throw console.error(r), new Error("unexpected error when fetching root document");
      }
    });
    const n = t.peerId || (crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)), r = t.network || [];
    Q(this, v, new nn({
      network: r.length > 0 ? r : void 0,
      storage: t.storage,
      peerId: n,
      sharePolicy: t.sharePolicy,
      isEphemeral: t.ephemeral
    })), Q(this, z, void 0), k(this, be).call(this, t.url, k(this, v)).then((s) => {
      Q(this, z, s), A.info("Root document initialized");
    }).catch((s) => {
      A.error("Failed to initialize root document:", s);
    }), A.info("SyncEngine created successfully");
  }
  whenReady() {
    return new Promise(async (t) => {
      await k(this, v).networkSubsystem.whenReady(), await k(this, Ee).call(this), Q(this, G, !0), t();
    });
  }
  /**
   * Get the Automerge Repo instance
   * @returns The configured Repo instance
   */
  getRepo() {
    return k(this, G) || A.warn(
      "getRepo() should not be called yet. Please await on SyncEngine.whenReady() to make sure initialization is complete."
    ), k(this, v);
  }
  getRootId() {
    return k(this, G) || A.warn(
      "getRootId() should not be called yet. Please await on SyncEngine.whenReady() to make sure initialization is complete."
    ), k(this, z);
  }
}
v = new WeakMap(), z = new WeakMap(), G = new WeakMap(), Ee = new WeakMap(), be = new WeakMap();
class Fr {
  constructor() {
    this.keyToValue = /* @__PURE__ */ new Map(), this.valueToKey = /* @__PURE__ */ new Map();
  }
  set(t, n) {
    this.keyToValue.set(t, n), this.valueToKey.set(n, t);
  }
  getByKey(t) {
    return this.keyToValue.get(t);
  }
  getByValue(t) {
    return this.valueToKey.get(t);
  }
  clear() {
    this.keyToValue.clear(), this.valueToKey.clear();
  }
}
class zt {
  constructor(t) {
    this.generateIdentifier = t, this.kv = new Fr();
  }
  register(t, n) {
    this.kv.getByValue(t) || (n || (n = this.generateIdentifier(t)), this.kv.set(n, t));
  }
  clear() {
    this.kv.clear();
  }
  getIdentifier(t) {
    return this.kv.getByValue(t);
  }
  getValue(t) {
    return this.kv.getByKey(t);
  }
}
class Lr extends zt {
  constructor() {
    super((t) => t.name), this.classToAllowedProps = /* @__PURE__ */ new Map();
  }
  register(t, n) {
    typeof n == "object" ? (n.allowProps && this.classToAllowedProps.set(t, n.allowProps), super.register(t, n.identifier)) : super.register(t, n);
  }
  getAllowedProps(t) {
    return this.classToAllowedProps.get(t);
  }
}
function Br(e) {
  if ("values" in Object)
    return Object.values(e);
  const t = [];
  for (const n in e)
    e.hasOwnProperty(n) && t.push(e[n]);
  return t;
}
function vr(e, t) {
  const n = Br(e);
  if ("find" in n)
    return n.find(t);
  const r = n;
  for (let s = 0; s < r.length; s++) {
    const o = r[s];
    if (t(o))
      return o;
  }
}
function X(e, t) {
  Object.entries(e).forEach(([n, r]) => t(r, n));
}
function pe(e, t) {
  return e.indexOf(t) !== -1;
}
function ut(e, t) {
  for (let n = 0; n < e.length; n++) {
    const r = e[n];
    if (t(r))
      return r;
  }
}
class zr {
  constructor() {
    this.transfomers = {};
  }
  register(t) {
    this.transfomers[t.name] = t;
  }
  findApplicable(t) {
    return vr(this.transfomers, (n) => n.isApplicable(t));
  }
  findByName(t) {
    return this.transfomers[t];
  }
}
const $r = (e) => Object.prototype.toString.call(e).slice(8, -1), $t = (e) => typeof e > "u", qr = (e) => e === null, se = (e) => typeof e != "object" || e === null || e === Object.prototype ? !1 : Object.getPrototypeOf(e) === null ? !0 : Object.getPrototypeOf(e) === Object.prototype, $e = (e) => se(e) && Object.keys(e).length === 0, L = (e) => Array.isArray(e), Hr = (e) => typeof e == "string", Mr = (e) => typeof e == "number" && !isNaN(e), Vr = (e) => typeof e == "boolean", jr = (e) => e instanceof RegExp, oe = (e) => e instanceof Map, ie = (e) => e instanceof Set, qt = (e) => $r(e) === "Symbol", Jr = (e) => e instanceof Date && !isNaN(e.valueOf()), Kr = (e) => e instanceof Error, ft = (e) => typeof e == "number" && isNaN(e), Wr = (e) => Vr(e) || qr(e) || $t(e) || Mr(e) || Hr(e) || qt(e), Gr = (e) => typeof e == "bigint", Xr = (e) => e === 1 / 0 || e === -1 / 0, Yr = (e) => ArrayBuffer.isView(e) && !(e instanceof DataView), Zr = (e) => e instanceof URL, Ht = (e) => e.replace(/\./g, "\\."), _e = (e) => e.map(String).map(Ht).join("."), ne = (e) => {
  const t = [];
  let n = "";
  for (let s = 0; s < e.length; s++) {
    let o = e.charAt(s);
    if (o === "\\" && e.charAt(s + 1) === ".") {
      n += ".", s++;
      continue;
    }
    if (o === ".") {
      t.push(n), n = "";
      continue;
    }
    n += o;
  }
  const r = n;
  return t.push(r), t;
};
function _(e, t, n, r) {
  return {
    isApplicable: e,
    annotation: t,
    transform: n,
    untransform: r
  };
}
const Mt = [
  _($t, "undefined", () => null, () => {
  }),
  _(Gr, "bigint", (e) => e.toString(), (e) => typeof BigInt < "u" ? BigInt(e) : (console.error("Please add a BigInt polyfill."), e)),
  _(Jr, "Date", (e) => e.toISOString(), (e) => new Date(e)),
  _(Kr, "Error", (e, t) => {
    const n = {
      name: e.name,
      message: e.message
    };
    return t.allowedErrorProps.forEach((r) => {
      n[r] = e[r];
    }), n;
  }, (e, t) => {
    const n = new Error(e.message);
    return n.name = e.name, n.stack = e.stack, t.allowedErrorProps.forEach((r) => {
      n[r] = e[r];
    }), n;
  }),
  _(jr, "regexp", (e) => "" + e, (e) => {
    const t = e.slice(1, e.lastIndexOf("/")), n = e.slice(e.lastIndexOf("/") + 1);
    return new RegExp(t, n);
  }),
  _(
    ie,
    "set",
    // (sets only exist in es6+)
    // eslint-disable-next-line es5/no-es6-methods
    (e) => [...e.values()],
    (e) => new Set(e)
  ),
  _(oe, "map", (e) => [...e.entries()], (e) => new Map(e)),
  _((e) => ft(e) || Xr(e), "number", (e) => ft(e) ? "NaN" : e > 0 ? "Infinity" : "-Infinity", Number),
  _((e) => e === 0 && 1 / e === -1 / 0, "number", () => "-0", Number),
  _(Zr, "URL", (e) => e.toString(), (e) => new URL(e))
];
function Ie(e, t, n, r) {
  return {
    isApplicable: e,
    annotation: t,
    transform: n,
    untransform: r
  };
}
const Vt = Ie((e, t) => qt(e) ? !!t.symbolRegistry.getIdentifier(e) : !1, (e, t) => ["symbol", t.symbolRegistry.getIdentifier(e)], (e) => e.description, (e, t, n) => {
  const r = n.symbolRegistry.getValue(t[1]);
  if (!r)
    throw new Error("Trying to deserialize unknown symbol");
  return r;
}), Qr = [
  Int8Array,
  Uint8Array,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array,
  Uint8ClampedArray
].reduce((e, t) => (e[t.name] = t, e), {}), jt = Ie(Yr, (e) => ["typed-array", e.constructor.name], (e) => [...e], (e, t) => {
  const n = Qr[t[1]];
  if (!n)
    throw new Error("Trying to deserialize unknown typed array");
  return new n(e);
});
function Jt(e, t) {
  return e?.constructor ? !!t.classRegistry.getIdentifier(e.constructor) : !1;
}
const Kt = Ie(Jt, (e, t) => ["class", t.classRegistry.getIdentifier(e.constructor)], (e, t) => {
  const n = t.classRegistry.getAllowedProps(e.constructor);
  if (!n)
    return { ...e };
  const r = {};
  return n.forEach((s) => {
    r[s] = e[s];
  }), r;
}, (e, t, n) => {
  const r = n.classRegistry.getValue(t[1]);
  if (!r)
    throw new Error(`Trying to deserialize unknown class '${t[1]}' - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564`);
  return Object.assign(Object.create(r.prototype), e);
}), Wt = Ie((e, t) => !!t.customTransformerRegistry.findApplicable(e), (e, t) => ["custom", t.customTransformerRegistry.findApplicable(e).name], (e, t) => t.customTransformerRegistry.findApplicable(e).serialize(e), (e, t, n) => {
  const r = n.customTransformerRegistry.findByName(t[1]);
  if (!r)
    throw new Error("Trying to deserialize unknown custom value");
  return r.deserialize(e);
}), es = [Kt, Vt, Wt, jt], dt = (e, t) => {
  const n = ut(es, (s) => s.isApplicable(e, t));
  if (n)
    return {
      value: n.transform(e, t),
      type: n.annotation(e, t)
    };
  const r = ut(Mt, (s) => s.isApplicable(e, t));
  if (r)
    return {
      value: r.transform(e, t),
      type: r.annotation
    };
}, Gt = {};
Mt.forEach((e) => {
  Gt[e.annotation] = e;
});
const ts = (e, t, n) => {
  if (L(t))
    switch (t[0]) {
      case "symbol":
        return Vt.untransform(e, t, n);
      case "class":
        return Kt.untransform(e, t, n);
      case "custom":
        return Wt.untransform(e, t, n);
      case "typed-array":
        return jt.untransform(e, t, n);
      default:
        throw new Error("Unknown transformation: " + t);
    }
  else {
    const r = Gt[t];
    if (!r)
      throw new Error("Unknown transformation: " + t);
    return r.untransform(e, n);
  }
}, j = (e, t) => {
  if (t > e.size)
    throw new Error("index out of bounds");
  const n = e.keys();
  for (; t > 0; )
    n.next(), t--;
  return n.next().value;
};
function Xt(e) {
  if (pe(e, "__proto__"))
    throw new Error("__proto__ is not allowed as a property");
  if (pe(e, "prototype"))
    throw new Error("prototype is not allowed as a property");
  if (pe(e, "constructor"))
    throw new Error("constructor is not allowed as a property");
}
const ns = (e, t) => {
  Xt(t);
  for (let n = 0; n < t.length; n++) {
    const r = t[n];
    if (ie(e))
      e = j(e, +r);
    else if (oe(e)) {
      const s = +r, o = +t[++n] == 0 ? "key" : "value", i = j(e, s);
      switch (o) {
        case "key":
          e = i;
          break;
        case "value":
          e = e.get(i);
          break;
      }
    } else
      e = e[r];
  }
  return e;
}, qe = (e, t, n) => {
  if (Xt(t), t.length === 0)
    return n(e);
  let r = e;
  for (let o = 0; o < t.length - 1; o++) {
    const i = t[o];
    if (L(r)) {
      const a = +i;
      r = r[a];
    } else if (se(r))
      r = r[i];
    else if (ie(r)) {
      const a = +i;
      r = j(r, a);
    } else if (oe(r)) {
      if (o === t.length - 2)
        break;
      const u = +i, f = +t[++o] == 0 ? "key" : "value", l = j(r, u);
      switch (f) {
        case "key":
          r = l;
          break;
        case "value":
          r = r.get(l);
          break;
      }
    }
  }
  const s = t[t.length - 1];
  if (L(r) ? r[+s] = n(r[+s]) : se(r) && (r[s] = n(r[s])), ie(r)) {
    const o = j(r, +s), i = n(o);
    o !== i && (r.delete(o), r.add(i));
  }
  if (oe(r)) {
    const o = +t[t.length - 2], i = j(r, o);
    switch (+s == 0 ? "key" : "value") {
      case "key": {
        const u = n(i);
        r.set(u, r.get(i)), u !== i && r.delete(i);
        break;
      }
      case "value": {
        r.set(i, n(r.get(i)));
        break;
      }
    }
  }
  return e;
};
function He(e, t, n = []) {
  if (!e)
    return;
  if (!L(e)) {
    X(e, (o, i) => He(o, t, [...n, ...ne(i)]));
    return;
  }
  const [r, s] = e;
  s && X(s, (o, i) => {
    He(o, t, [...n, ...ne(i)]);
  }), t(r, n);
}
function rs(e, t, n) {
  return He(t, (r, s) => {
    e = qe(e, s, (o) => ts(o, r, n));
  }), e;
}
function ss(e, t) {
  function n(r, s) {
    const o = ns(e, ne(s));
    r.map(ne).forEach((i) => {
      e = qe(e, i, () => o);
    });
  }
  if (L(t)) {
    const [r, s] = t;
    r.forEach((o) => {
      e = qe(e, ne(o), () => e);
    }), s && X(s, n);
  } else
    X(t, n);
  return e;
}
const os = (e, t) => se(e) || L(e) || oe(e) || ie(e) || Jt(e, t);
function is(e, t, n) {
  const r = n.get(e);
  r ? r.push(t) : n.set(e, [t]);
}
function as(e, t) {
  const n = {};
  let r;
  return e.forEach((s) => {
    if (s.length <= 1)
      return;
    t || (s = s.map((a) => a.map(String)).sort((a, u) => a.length - u.length));
    const [o, ...i] = s;
    o.length === 0 ? r = i.map(_e) : n[_e(o)] = i.map(_e);
  }), r ? $e(n) ? [r] : [r, n] : $e(n) ? void 0 : n;
}
const Yt = (e, t, n, r, s = [], o = [], i = /* @__PURE__ */ new Map()) => {
  const a = Wr(e);
  if (!a) {
    is(e, s, t);
    const g = i.get(e);
    if (g)
      return r ? {
        transformedValue: null
      } : g;
  }
  if (!os(e, n)) {
    const g = dt(e, n), h = g ? {
      transformedValue: g.value,
      annotations: [g.type]
    } : {
      transformedValue: e
    };
    return a || i.set(e, h), h;
  }
  if (pe(o, e))
    return {
      transformedValue: null
    };
  const u = dt(e, n), f = u?.value ?? e, l = L(f) ? [] : {}, d = {};
  X(f, (g, h) => {
    if (h === "__proto__" || h === "constructor" || h === "prototype")
      throw new Error(`Detected property ${h}. This is a prototype pollution risk, please remove it from your object.`);
    const m = Yt(g, t, n, r, [...s, h], [...o, e], i);
    l[h] = m.transformedValue, L(m.annotations) ? d[h] = m.annotations : se(m.annotations) && X(m.annotations, (p, b) => {
      d[Ht(h) + "." + b] = p;
    });
  });
  const y = $e(d) ? {
    transformedValue: l,
    annotations: u ? [u.type] : void 0
  } : {
    transformedValue: l,
    annotations: u ? [u.type, d] : d
  };
  return a || i.set(e, y), y;
};
function Zt(e) {
  return Object.prototype.toString.call(e).slice(8, -1);
}
function ht(e) {
  return Zt(e) === "Array";
}
function cs(e) {
  if (Zt(e) !== "Object")
    return !1;
  const t = Object.getPrototypeOf(e);
  return !!t && t.constructor === Object && t === Object.prototype;
}
function ls(e, t, n, r, s) {
  const o = {}.propertyIsEnumerable.call(r, t) ? "enumerable" : "nonenumerable";
  o === "enumerable" && (e[t] = n), s && o === "nonenumerable" && Object.defineProperty(e, t, {
    value: n,
    enumerable: !1,
    writable: !0,
    configurable: !0
  });
}
function Me(e, t = {}) {
  if (ht(e))
    return e.map((s) => Me(s, t));
  if (!cs(e))
    return e;
  const n = Object.getOwnPropertyNames(e), r = Object.getOwnPropertySymbols(e);
  return [...n, ...r].reduce((s, o) => {
    if (ht(t.props) && !t.props.includes(o))
      return s;
    const i = e[o], a = Me(i, t);
    return ls(s, o, a, e, t.nonenumerable), s;
  }, {});
}
class E {
  /**
   * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.
   */
  constructor({ dedupe: t = !1 } = {}) {
    this.classRegistry = new Lr(), this.symbolRegistry = new zt((n) => n.description ?? ""), this.customTransformerRegistry = new zr(), this.allowedErrorProps = [], this.dedupe = t;
  }
  serialize(t) {
    const n = /* @__PURE__ */ new Map(), r = Yt(t, n, this, this.dedupe), s = {
      json: r.transformedValue
    };
    r.annotations && (s.meta = {
      ...s.meta,
      values: r.annotations
    });
    const o = as(n, this.dedupe);
    return o && (s.meta = {
      ...s.meta,
      referentialEqualities: o
    }), s;
  }
  deserialize(t) {
    const { json: n, meta: r } = t;
    let s = Me(n);
    return r?.values && (s = rs(s, r.values, this)), r?.referentialEqualities && (s = ss(s, r.referentialEqualities)), s;
  }
  stringify(t) {
    return JSON.stringify(this.serialize(t));
  }
  parse(t) {
    return this.deserialize(JSON.parse(t));
  }
  registerClass(t, n) {
    this.classRegistry.register(t, n);
  }
  registerSymbol(t, n) {
    this.symbolRegistry.register(t, n);
  }
  registerCustom(t, n) {
    this.customTransformerRegistry.register({
      name: n,
      ...t
    });
  }
  allowErrorProps(...t) {
    this.allowedErrorProps.push(...t);
  }
}
E.defaultInstance = new E();
E.serialize = E.defaultInstance.serialize.bind(E.defaultInstance);
E.deserialize = E.defaultInstance.deserialize.bind(E.defaultInstance);
E.stringify = E.defaultInstance.stringify.bind(E.defaultInstance);
E.parse = E.defaultInstance.parse.bind(E.defaultInstance);
E.registerClass = E.defaultInstance.registerClass.bind(E.defaultInstance);
E.registerSymbol = E.defaultInstance.registerSymbol.bind(E.defaultInstance);
E.registerCustom = E.defaultInstance.registerCustom.bind(E.defaultInstance);
E.allowErrorProps = E.defaultInstance.allowErrorProps.bind(E.defaultInstance);
E.serialize;
E.deserialize;
E.stringify;
E.parse;
E.registerClass;
E.registerCustom;
E.registerSymbol;
E.allowErrorProps;
function J(e, t = /* @__PURE__ */ new WeakSet()) {
  if (!e || typeof e != "object" || e instanceof Date || e instanceof RegExp || e instanceof Error || t.has(e))
    return e;
  if (t.add(e), Array.isArray(e))
    return e.filter((r) => typeof r != "function").map((r) => J(r, t));
  if (e instanceof Map) {
    const r = /* @__PURE__ */ new Map();
    for (const [s, o] of e.entries())
      typeof o != "function" && r.set(s, J(o, t));
    return r;
  }
  if (e instanceof Set) {
    const r = /* @__PURE__ */ new Set();
    for (const s of e.values())
      typeof s != "function" && r.add(J(s, t));
    return r;
  }
  const n = {};
  for (const r in e)
    if (e.hasOwnProperty(r)) {
      const s = e[r];
      if (typeof s == "function")
        continue;
      n[r] = J(s, t);
    }
  return n;
}
function we(e) {
  if (!e || typeof e != "object")
    return e;
  try {
    const t = J(e), n = E.serialize(t);
    return !n.meta || Object.keys(n.meta).length === 0 ? n.json : n;
  } catch (t) {
    return console.warn(
      "SuperJSON serialization failed, falling back to basic serialization:",
      t
    ), J(e);
  }
}
function us(e) {
  if (!e || typeof e != "object")
    return e;
  try {
    return e.json !== void 0 && e.meta !== void 0 ? E.deserialize(e) : e;
  } catch (t) {
    return console.warn(
      "SuperJSON deserialization failed, returning object as-is:",
      t
    ), e;
  }
}
function fs(e, t) {
  try {
    const n = we(e), r = we(t);
    return JSON.stringify(n) === JSON.stringify(r);
  } catch (n) {
    return console.warn(
      "Serialized comparison failed, falling back to JSON comparison:",
      n
    ), JSON.stringify(e) === JSON.stringify(t);
  }
}
const ds = (e, t) => {
  const n = e.getState();
  if (fs(n, t))
    return;
  const r = us(t);
  e.setState((s) => {
    const o = { ...s };
    return Object.keys(r).forEach((i) => {
      i in r && (o[i] = r[i]);
    }), o;
  });
};
async function le(e, t, n, r = !1) {
  const s = n.startsWith("/") ? n.slice(1) : n, o = s ? s.split("/") : [];
  if (o.length === 0) {
    const d = await e.find(t), y = d.doc();
    if (!y && r) {
      d.change((h) => {
        h.type = "dir", h.name = "/", h.timestamps = {
          create: Date.now(),
          modified: Date.now()
        }, h.children = [];
      });
      const g = d.doc();
      return g ? {
        nodeHandle: d,
        node: JSON.parse(JSON.stringify(g)),
        parentPath: ""
      } : void 0;
    } else if (!y)
      return;
    return {
      nodeHandle: d,
      node: JSON.parse(JSON.stringify(y)),
      parentPath: ""
    };
  }
  let i = t, a = await e.find(i), u = a.doc(), f = "";
  if (!u && r) {
    a.change((y) => {
      y.type = "dir", y.name = "/", y.timestamps = {
        create: Date.now(),
        modified: Date.now()
      }, y.children = [];
    });
    const d = a.doc();
    if (!d)
      return;
    u = JSON.parse(JSON.stringify(d));
  } else if (u)
    u = JSON.parse(JSON.stringify(u));
  else
    return;
  let l;
  for (let d = 0; d < o.length; d++) {
    const y = o[d], g = d === o.length - 1;
    if (f += `/${y}`, !u.children && r) {
      a.change((b) => {
        b.children = [];
      });
      const p = a.doc();
      if (!p)
        return;
      u = p;
    } else if (!u.children)
      return;
    const m = (u.children || []).find((p) => p.name === y);
    if (!m && r) {
      const p = e.create(), b = p.documentId;
      p.change((S) => {
        S.type = "dir", S.name = y, S.timestamps = {
          create: Date.now(),
          modified: Date.now()
        }, S.children = [];
      }), a.change((S) => {
        if (S.children || (S.children = []), S.children.find(
          (H) => H.name === y
        ))
          return;
        const F = {
          name: y,
          type: "dir",
          pointer: b,
          timestamps: {
            create: Date.now(),
            modified: Date.now()
          }
        };
        S.children.push(F), S.timestamps && (S.timestamps.modified = Date.now());
      });
      const R = a.doc();
      if (!R)
        return;
      const O = R.children?.find(
        (S) => S.name === y
      );
      if (!O || !O.pointer)
        return;
      i = O.pointer, a = await e.find(i);
      const P = a.doc();
      if (!P)
        return;
      if (u = P, l = void 0, g)
        return {
          nodeHandle: a,
          node: JSON.parse(JSON.stringify(u)),
          parentPath: f
        };
    } else if (m)
      if (m.pointer) {
        if (l = m, g)
          return {
            nodeHandle: a,
            node: u,
            targetRef: m,
            parentPath: f
          };
        if (m.type === "dir") {
          i = m.pointer, a = await e.find(i);
          const p = a.doc();
          if (!p)
            return;
          u = JSON.parse(JSON.stringify(p));
        } else
          return;
      } else
        return;
    else return;
  }
  return {
    nodeHandle: a,
    node: JSON.parse(JSON.stringify(u)),
    targetRef: l,
    parentPath: f
  };
}
async function Ce(e, t, n) {
  const r = await le(e, t, n);
  if (r && !(!r.targetRef || r.targetRef?.type === "dir"))
    return await e.find(r.targetRef.pointer);
}
async function Qt(e, t, n, r) {
  const o = (n.startsWith("/") ? n.slice(1) : n).split("/");
  if (o.length === 0 || o.length === 1 && o[0] === "")
    throw new Error("Cannot create document at root path");
  const i = o[o.length - 1], a = o.slice(0, -1).join("/"), u = await le(e, t, a, !0);
  if (!u)
    throw new Error(`Failed to create directory structure for ${n}`);
  let f;
  u.targetRef ? f = await e.find(u.targetRef.pointer) : f = u.nodeHandle, f.change((l) => {
    l.children || (l.children = []);
    const d = l.children.findIndex(
      (g) => g.name === i
    ), y = {
      name: i,
      type: "doc",
      pointer: r.documentId,
      timestamps: {
        create: Date.now(),
        modified: Date.now()
      }
    };
    d >= 0 ? l.children[d] = y : l.children.push(y), l.timestamps && (l.timestamps.modified = Date.now());
  });
}
async function en(e, t, n) {
  const r = await le(e, t, n);
  if (!r || !r.targetRef)
    return !1;
  const s = r.targetRef.pointer;
  if (!s)
    return !1;
  if (r.targetRef.type === "dir") {
    const i = (await e.find(s)).doc();
    if (i && i.children && i.children.length > 0)
      for (const a of [...i.children]) {
        const u = `${n}/${a.name}`;
        await en(e, t, u);
      }
  }
  return r.nodeHandle.change((o) => {
    if (!o.children) return;
    const i = o.children.findIndex(
      (a) => a.name === r.targetRef.name && a.pointer === r.targetRef.pointer
    );
    i >= 0 && (o.children.splice(i, 1), o.timestamps && (o.timestamps.modified = Date.now()));
  }), e.delete(s), !0;
}
let W = null;
function Us(e) {
  return W ? A.warn("SyncEngine instance already exists. Ignoring new options.") : (A.info("Creating new SyncEngine instance"), W = new Ur(e)), W;
}
function tn() {
  return W || (A.warn("Sync engine not created yet"), null);
}
function K() {
  const e = tn();
  return e ? e.getRepo() : null;
}
function Ke() {
  const e = tn();
  return e ? e.getRootId() : void 0;
}
function Fs() {
  W = null;
}
const ge = (e, t) => {
  if (t == null) return;
  const n = new Set(Object.keys(e)), r = new Set(Object.keys(t));
  for (const s of r) {
    const o = t[s];
    o !== void 0 && (o == null || typeof o != "object" || Array.isArray(o) || !e.hasOwnProperty(s) || typeof e[s] != "object" || e[s] == null || Array.isArray(e[s]) ? e[s] = o : ge(e[s], o));
  }
  for (const s of n)
    r.has(s) || delete e[s];
}, Ls = (e, t) => (n, r, s) => {
  let o = null, i = !1;
  const a = e(
    // Wrap the original set function to sync changes to Automerge whenever state changes
    (h, m) => {
      if (n(h, m), !o || !i) return;
      const p = r();
      try {
        const b = we(p);
        o.change((R) => {
          ge(R, b);
        });
      } catch (b) {
        A.warn(`Error updating document ${t.docId}:`, b);
      }
    },
    // Pass through the original get and api functions
    r,
    s
  ), u = (h) => {
    if (h)
      try {
        A.debugWithContext(
          "sync-middleware",
          "Received doc change, updating Zustand store:",
          h
        ), ds(s, h);
      } catch (m) {
        A.error(
          `Error handling document change for ${t.docId}:`,
          m
        );
      }
  };
  async function f() {
    if (i) return;
    const h = K(), m = Ke();
    if (!h) {
      A.warn(
        `Cannot initialize sync for ${t.docId}: repo not available`
      );
      return;
    }
    try {
      const p = await Ce(h, m, t.docId);
      p ? (o = p, p.doc()) : (o = h.create(), Qt(h, m, t.docId, o)), o?.on("change", ({ doc: R }) => {
        R && u(R);
      });
      const b = o?.doc();
      if (b)
        u(b);
      else {
        const R = r(), O = we(R);
        o?.change((P) => {
          ge(P, O);
        });
      }
      i = !0, A.debug(`Sync initialized for document ${t.docId}`);
    } catch (p) {
      A.error(`Failed to initialize document ${t.docId}:`, p), t.onInitError && t.onInitError(
        p instanceof Error ? p : new Error(String(p))
      );
    }
  }
  const l = t.initTimeout ?? 3e4;
  let d = null;
  const y = Date.now();
  if (typeof window < "u" && !window.__REPO_REGISTRY__) {
    window.__REPO_REGISTRY__ = {
      // Array of callbacks to call when the repo becomes available
      callbacks: [],
      // Function to notify all waiting callbacks
      notifyCallbacks: function() {
        const m = K();
        m && (this.callbacks.forEach((p) => p(m)), this.callbacks = []);
      }
    };
    const h = setInterval(() => {
      K() && window.__REPO_REGISTRY__ && (window.__REPO_REGISTRY__.notifyCallbacks(), clearInterval(h));
    }, 100);
  }
  const g = async () => {
    if (Date.now() - y > l) {
      d && (clearTimeout(d), d = null);
      const m = new Error(
        `Sync initialization timed out after ${l}ms for document ${t.docId}`
      );
      A.error(m.message), t.onInitError && t.onInitError(m);
      return;
    }
    const h = K();
    h && !i ? (A.debug(`Repo available, initializing store for ${t.docId}`), await f(), d && (clearTimeout(d), d = null)) : h || (typeof window < "u" && window.__REPO_REGISTRY__ ? (window.__REPO_REGISTRY__.callbacks.push(async () => {
      i || (A.debug(
        `Repo became available, initializing store for ${t.docId}`
      ), await f());
    }), d = setTimeout(g, 1e3)) : d = setTimeout(g, 100));
  };
  return g(), {
    ...a
    // We could add cleanup methods or sync status indicators here if needed
  };
}, ue = () => {
  const e = K(), t = Ke();
  if (!e || !t)
    throw new Error("SyncEngine is not properly initialized");
  return {
    repo: e,
    root: t
  };
}, Bs = async (e) => {
  const { repo: t, root: n } = ue(), r = await le(t, n, e);
  if (!r)
    return;
  if (!r.targetRef && r.node)
    return r.node;
  if (r.targetRef?.type === "doc")
    throw new Error("You cannot ls a document");
  return (await t.find(r.targetRef.pointer)).doc();
}, vs = async (e) => {
  const { repo: t, root: n } = ue();
  return await en(t, n, e);
}, zs = async (e) => {
  const { repo: t, root: n } = ue(), r = await le(t, n, e, !0);
  if (r)
    return r.node;
}, $s = async (e) => {
  const { repo: t, root: n } = ue(), r = await Ce(t, n, e);
  if (r)
    return r.doc();
}, qs = async (e, t) => {
  const { repo: n, root: r } = ue(), s = await Ce(n, r, e);
  let o;
  s ? (o = s, o.doc()) : (o = n.create(), o.doc(), await Qt(n, r, e, o)), o.change((i) => {
    ge(i, t);
  }), o.doc();
}, Hs = async (e, t) => {
  const n = K(), r = Ke();
  if (!n || !r)
    throw new Error("SyncEngine is not properly initialized");
  const s = await Ce(n, r, e);
  if (!s)
    throw new Error(`Document not found at path: ${e}`);
  const o = (a) => {
    const { doc: u, patches: f, patchInfo: l, handle: d } = a;
    u && t({ doc: u, patches: f, patchInfo: l, handle: d });
  };
  s.on("change", o);
  const i = s.doc();
  return i && t({
    doc: i,
    patches: [],
    patchInfo: { before: null, after: i, source: "initial" },
    handle: s
  }), () => {
    s.off("change", o), A.debug(`Removed listener for document ${e}`);
  };
};
export {
  Ur as SyncEngine,
  Us as configureSyncEngine,
  K as getRepo,
  Ke as getRootId,
  tn as getSyncEngine,
  Hs as listenToDoc,
  Bs as ls,
  zs as mkDir,
  $s as readDoc,
  Fs as resetSyncEngine,
  vs as rm,
  Ls as sync,
  qs as writeDoc
};
//# sourceMappingURL=index.js.map
