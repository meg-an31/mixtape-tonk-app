export interface PersistedBundleRoute {
    bundleName: string;
    bundlePath: string;
    route: string;
    id: string;
    startTime: string;
    isRunning: boolean;
}
export interface BundlePersistenceConfig {
    persistencePath: string;
    verbose?: boolean;
}
export declare class BundlePersistence {
    private persistenceFile;
    private verbose;
    constructor(config: BundlePersistenceConfig);
    private log;
    /**
     * Save running bundle routes to disk
     */
    saveBundleRoutes(bundleRoutes: Map<string, {
        bundleName: string;
        bundlePath: string;
        route: string;
        id: string;
        startTime: Date;
        isRunning: boolean;
    }>): Promise<void>;
    /**
     * Load running bundle routes from disk
     */
    loadBundleRoutes(): Promise<Map<string, {
        bundleName: string;
        bundlePath: string;
        route: string;
        id: string;
        startTime: Date;
        isRunning: boolean;
    }>>;
    /**
     * Clear all persisted bundle routes
     */
    clearBundleRoutes(): Promise<void>;
    /**
     * Check if a bundle directory still exists on disk
     */
    bundleExists(bundlePath: string): boolean;
    /**
     * Validate and filter persisted bundles to only include those that still exist
     */
    validateAndFilterBundles(bundleRoutes: Map<string, {
        bundleName: string;
        bundlePath: string;
        route: string;
        id: string;
        startTime: Date;
        isRunning: boolean;
    }>): Promise<{
        valid: Map<string, {
            bundleName: string;
            bundlePath: string;
            route: string;
            id: string;
            startTime: Date;
            isRunning: boolean;
        }>;
        removed: string[];
    }>;
}
//# sourceMappingURL=bundlePersistence.d.ts.map