/**
 * Worker YAML Configuration Schema
 *
 * This file defines the standard format for worker configuration YAML files in Tonk.
 */
import { z } from 'zod';
/**
 * Zod schema for worker health check configuration
 */
export declare const WorkerHealthCheckSchema: z.ZodObject<{
    endpoint: z.ZodOptional<z.ZodString>;
    method: z.ZodDefault<z.ZodString>;
    interval: z.ZodDefault<z.ZodNumber>;
    timeout: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    method: string;
    timeout: number;
    interval: number;
    endpoint?: string | undefined;
}, {
    method?: string | undefined;
    endpoint?: string | undefined;
    timeout?: number | undefined;
    interval?: number | undefined;
}>;
/**
 * Zod schema for worker configuration
 */
export declare const WorkerConfigSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    endpoint: z.ZodString;
    protocol: z.ZodDefault<z.ZodString>;
    healthCheck: z.ZodOptional<z.ZodObject<{
        endpoint: z.ZodOptional<z.ZodString>;
        method: z.ZodDefault<z.ZodString>;
        interval: z.ZodDefault<z.ZodNumber>;
        timeout: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        method: string;
        timeout: number;
        interval: number;
        endpoint?: string | undefined;
    }, {
        method?: string | undefined;
        endpoint?: string | undefined;
        timeout?: number | undefined;
        interval?: number | undefined;
    }>>;
    process: z.ZodObject<{
        script: z.ZodString;
        cwd: z.ZodOptional<z.ZodString>;
        instances: z.ZodDefault<z.ZodNumber>;
        autorestart: z.ZodDefault<z.ZodBoolean>;
        watch: z.ZodDefault<z.ZodBoolean>;
        max_memory_restart: z.ZodOptional<z.ZodString>;
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        script: string;
        instances: number;
        autorestart: boolean;
        watch: boolean;
        cwd?: string | undefined;
        env?: Record<string, string> | undefined;
        max_memory_restart?: string | undefined;
    }, {
        script: string;
        cwd?: string | undefined;
        env?: Record<string, string> | undefined;
        instances?: number | undefined;
        autorestart?: boolean | undefined;
        watch?: boolean | undefined;
        max_memory_restart?: string | undefined;
    }>;
    config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    process: {
        script: string;
        instances: number;
        autorestart: boolean;
        watch: boolean;
        cwd?: string | undefined;
        env?: Record<string, string> | undefined;
        max_memory_restart?: string | undefined;
    };
    endpoint: string;
    protocol: string;
    version?: string | undefined;
    healthCheck?: {
        method: string;
        timeout: number;
        interval: number;
        endpoint?: string | undefined;
    } | undefined;
    description?: string | undefined;
    config?: Record<string, any> | undefined;
}, {
    name: string;
    process: {
        script: string;
        cwd?: string | undefined;
        env?: Record<string, string> | undefined;
        instances?: number | undefined;
        autorestart?: boolean | undefined;
        watch?: boolean | undefined;
        max_memory_restart?: string | undefined;
    };
    endpoint: string;
    version?: string | undefined;
    healthCheck?: {
        method?: string | undefined;
        endpoint?: string | undefined;
        timeout?: number | undefined;
        interval?: number | undefined;
    } | undefined;
    description?: string | undefined;
    protocol?: string | undefined;
    config?: Record<string, any> | undefined;
}>;
/**
 * Type for worker configuration
 */
export type WorkerConfig = z.infer<typeof WorkerConfigSchema>;
/**
 * Example YAML configuration:
 *
 * ```yaml
 * # Worker Information
 * name: obsidian-worker
 * description: Tonk worker for Obsidian integration
 * version: 1.0.0
 *
 * # Connection Details
 * endpoint: http://localhost:5555/tonk
 * protocol: http
 *
 * # Health Check Configuration
 * healthCheck:
 *   endpoint: http://localhost:5555/health
 *   method: GET
 *   interval: 30000
 *   timeout: 5000
 *
 * # Process Management
 * process:
 *   script: ./dist/index.js
 *   cwd: ./
 *   instances: 1
 *   autorestart: true
 *   watch: false
 *   max_memory_restart: 500M
 *   env:
 *     NODE_ENV: production
 *     CHROMA_URL: http://localhost:8888
 *
 * # Additional Configuration
 * config:
 *   syncDirectory: notes
 *   embedModel: all-MiniLM-L6-v2
 * ```
 */
//# sourceMappingURL=workerConfig.d.ts.map