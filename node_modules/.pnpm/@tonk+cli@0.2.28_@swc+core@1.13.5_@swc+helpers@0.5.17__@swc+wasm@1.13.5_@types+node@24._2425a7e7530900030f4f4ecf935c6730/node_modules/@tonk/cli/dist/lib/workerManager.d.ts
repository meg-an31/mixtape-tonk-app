import { Worker, WorkerManager, WorkerRegistrationOptions } from '../types/worker.js';
/**
 * Implementation of the WorkerManager interface
 */
export declare class TonkWorkerManager implements WorkerManager {
    private workersPath;
    constructor();
    /**
     * Register a new worker
     */
    register(options: WorkerRegistrationOptions): Promise<Worker>;
    /**
     * Register a worker from a YAML configuration file
     */
    registerFromYamlConfig(yamlConfig: any): Promise<Worker>;
    /**
     * Get a worker by ID
     */
    get(id: string): Promise<Worker | null>;
    /**
     * Find a worker by name or ID
     * If the identifier matches an ID exactly, returns that worker
     * Otherwise, searches for a worker with a matching name
     */
    findByNameOrId(identifier: string): Promise<Worker | null>;
    /**
     * List all registered workers
     */
    list(): Promise<Worker[]>;
    /**
     * Update a worker
     */
    update(id: string, updates: Partial<Worker>): Promise<Worker>;
    /**
     * Remove a worker
     */
    remove(id: string): Promise<boolean>;
    /**
     * Start a worker
     * @param id Worker ID to start
     */
    start(id: string): Promise<boolean>;
    /**
     * Stop a worker
     */
    stop(id: string): Promise<boolean>;
    /**
     * Check worker health
     */
    checkHealth(id: string): Promise<boolean>;
    /**
     * Generate a worker ID
     */
    private generateWorkerId;
    /**
     * Perform HTTP health check
     */
    private httpHealthCheck;
}
//# sourceMappingURL=workerManager.d.ts.map