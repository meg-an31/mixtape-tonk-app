/**
     * Create a new blob file with the given blob metadata, and content.
     *
     * @param path - Absolute path where the file should be created
     * @param metadata - Content to write to the file (string or binary data)
     * @param blob - Uint8Array representing the binary data
     * @throws {FileSystemError} If the file already exists or path is invalid
     *
     * @example
     * ```typescript
     * // Create a text file
     * await vfs.createFile('/media/hello.json', {name: "my-image", mime: "image/png"}, imgArray);
     * ```
     */
    async createBlobFile(path, metadata, blob) {
        try {
            const content = {
                metadata: metadata, 
                blob: blob
            };
            await __classPrivateFieldGet(this, _VirtualFileSystem_wasm, "f").createFile(path, content);
        }
        catch (error) {
            throw new FileSystemError(`Failed to create file at ${path}: ${error}`);
        }
    }
    /**
     * Read the contents of a blob file.
     *
     * @param path - Absolute path to the file
     * @returns JSON representing the blob and its metadata
     * @throws {FileSystemError} If the file doesn't exist, can't be read, or 
     * wasn't created using the `createBlobFile` function (resulting in incorrect structure)
     *
     * @example
     * ```typescript
     * const content = await vfs.readBlobFile('/media/my_video_compressed.json');
     * console.log(content.metadata.name);
     * render(content.blob, content.metadata.mime);
     * ```
     */
    async readBlobFile(path) {
        try {
            const result = await __classPrivateFieldGet(this, _VirtualFileSystem_wasm, "f").readFile(path);
            if (result === null) {
                throw new FileSystemError(`File not found: ${path}`);
            }
            const result_parsed = JSON.parse(result);
            if (!result_parsed.content.blob || !result_parsed.content.metadata) {
                throw new FileSystemError(`File not a blob type: ${path}. Try using readFile instead.`);
            }
            return result_parsed;
        }
        catch (error) {
            if (error instanceof FileSystemError)
                throw error;
            throw new FileSystemError(`Failed to read file at ${path}: ${error}`);
        }
    }